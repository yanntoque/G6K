/*
The MIT License (MIT)

Copyright (c) 2015 Jacques ArchimÃ¨de

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

(function () {
	"use strict";

	Date.msPERDAY = 1000 * 60 * 60 * 24;

	Date.locale = "en-US";

	Date.easter = function(year) {
		try {
			year = Number( year );
			if ( year != year ) { 
				throw new TypeError( "Value must be a number." );
			}
			else if ( year > 275760 || year < -271820 ) {
				throw new RangeError( "Value be between -271820 and 275760 due to technical limitations of Date constructor." );
			}
		}
		catch ( e ) { console && console.log( e ); }
	 
		year = Math.floor( year );
		var c = Math.floor( year / 100 );
		var n = year - 19 * Math.floor( year / 19 );
		var k = Math.floor( ( c - 17 ) / 25 );
		var i = c - Math.floor( c / 4 ) - Math.floor( ( c - k ) / 3 ) + 19 * n + 15;
		i = i - 30 * Math.floor( i / 30 );
		i = i - Math.floor( i / 28 ) * ( 1 - Math.floor( i / 28 ) * Math.floor( 29 / ( i + 1 ) ) * Math.floor( ( 21 - n ) / 11 ) );
		var j = year + Math.floor( year / 4 ) + i + 2 - c + Math.floor( c / 4 );
		j = j - 7 * Math.floor( j / 7 );
		var l = i - j;
		var m = 3 + Math.floor( ( l + 40 ) / 44 );
		var d = l + 28 - 31 * Math.floor( m / 4 );
		var z = new Date();
		z.setFullYear( year, m-1, d );
		z.setHours(0,0,0,0);
		return z;
	};

	Date.nthDayOfMonth = function(nth, day, month, year) {
		var date = Date.createFromFormat("Y-n-j", year + "-" + month + "-01" );
		while(date.getDay()!=day){      
			date.setDate(date.getDate()+1) ;
		}
		date.setDate(date.getDate() + (nth - 1) * 7);
		return date;
	}

	Date.holidaysOfYear = function(year, lang) {
		var country = "US";
		if (lang) {
			var c = lang.split("-");
			c = c[c.length - 1].toUpperCase();
			if (Date.holidays[c]) {
				country = c;
			}
		}
		var fixed =  Date.holidays[country].fixed_holidays;
		var holidays =  Date.holidays[country].moveable_holidays(year);
		$.each(fixed, function( d, monthday ) {
			holidays.push(Date.createFromFormat("Y-n-j", year + "-" + monthday));
		});
		return holidays;
	};

	Date.prototype.msPERDAY = Date.msPERDAY;

	Date.prototype.copy = function () { 
		return new Date( +this ); 
	};

	Date.prototype.workingDaysBefore = function(endDate) {
		// Validate input
		if (endDate < this)
			return 0;

		// Calculate days between dates
		var startDate = this.copy();
		startDate.setHours(0,0,0,1);  // Start just after midnight
		endDate.setHours(23,59,59,999);  // End just before midnight

		var diff = Date.UTC(endDate.getFullYear(), endDate.getMonth(), endDate.getDate()) - Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());  // Milliseconds between datetime objects    
		var days = Math.ceil(diff / this.msPERDAY) + 1;

		// Subtract two weekend days for every week in between
		var weeks = Math.floor(days / 7);
		var days = days - (weeks * 2);

		// Handle special cases
		var startDay = startDate.getDay();
		var endDay = endDate.getDay();

		// Remove weekend not previously removed.   
		if (startDay - endDay > 1)         
			days = days - 2;      

		// Remove start day if span starts on Sunday but ends before Saturday
		if (startDay == 0 && endDay != 6)
			days = days - 1;

		// Remove end day if span ends on Saturday but starts after Sunday
		if (endDay == 6 && startDay != 0)
			days = days - 1;  

		var locale = Date.locale ? Date.locale : "en-US";
		var startYear = startDate.getFullYear();
		var endYear = endDate.getFullYear();
		startDate.setHours(0,0,0,0);
		for (var y = startYear; y <= endYear; y++) {
			var holidays = Date.holidaysOfYear(y, locale);
			$.each(holidays, function( h, holiday ) {
				var d = holiday.getDay();
				if (d != 0 && d != 6 && holiday >= startDate && holiday <= endDate)
					days = days - 1;
			});
		}
		return days;
	};

	Date.prototype.isWorkingDay = function() {
		var day = this.getDay();
		if (day == 0 || day == 6) {
			return false; 
		}
		var locale = Date.locale ? Date.locale : "en-US";
		var holidays = Date.holidaysOfYear(this.getFullYear(), locale);
		var isHoliday = false;
		var self = this;
		$.each(holidays, function( h, holiday ) {
			if (holiday == self) {
				isHoliday = true;
				return false;
			}
		});
		return ! isHoliday;
	}

	Date.prototype.nextWorkingDay = function() {
		var d = new Date(+this);
		while (! d.isWorkingDay()) {
			d.addDays(1); 
		}
		return d;
	};

	Date.prototype.firstDayOfMonth = function() {
		return new Date(this.getFullYear(), this.getMonth(), 1);
	};

	Date.prototype.lastDayOfMonth = function() {
		return new Date(this.getFullYear(), this.getMonth() + 1, 0);
	};

	Date.prototype.lastday = function() {
		var d = new Date(this.getFullYear(), this.getMonth() + 1, 0);
		return d.getDate();
	};

	Date.prototype.getDaysBetween = function(d) {
		var tmp = d.copy();
		tmp.setHours(this.getHours(), this.getMinutes(), this.getSeconds(), this.getMilliseconds());
		var diff = tmp.getTime() - this.getTime();
		return Math.ceil(diff/this.msPERDAY);        
	};

	Date.prototype.getDayOfYear = function() {
		var start = new Date(this.getFullYear(), 0, 0);
		return this.getDaysBetween(start) * -1;
	};

	Date.prototype.getDaysInMonth = function(){
		var d = new Date(this.getFullYear(), this.getMonth()+1, 0);
		return d.getDate();
	};

	Date.prototype.getWeekNumber = function(){
		var d = new Date(+this);
		d.setHours(0,0,0);
		d.setDate(d.getDate()+4-(d.getDay()||7));
		return Math.ceil((((d-new Date(d.getFullYear(),0,1))/8.64e7)+1)/7);
	};

	Date.prototype.isLeapYear = function(utc) {
		var y = utc ? this.getUTCFullYear() : this.getFullYear();
		return !(y % 4) && (y % 100) || !(y % 400) ? true : false;
	};

	Date.prototype.addDays = function(d) {
		this.setTime( this.getTime() + d * Date.msPERDAY );
		return this;
	};

	Date.prototype.addWeeks = function(w) {
		this.addDays(w * 7);
		return this;
	};

	Date.prototype.addMonths = function(m) {
		var d = this.getDate();
		this.setMonth(this.getMonth() + m);
		if (this.getDate() < d)
			 this.setDate(0);
		return this;
	};

	Date.prototype.addYears = function(y) {
		var m = this.getMonth();
		this.setFullYear(this.getFullYear() + y);
		if (m < this.getMonth()) {
			this.setDate(0);
		}
		return this;
	};

	Date.prototype.addWeekDays = function(d) {
		var startDay = this.getDay();  //current weekday 0 thru 6
		var wkEnds = 0;                //# of weekends needed
		var partialWeek = d % 5;       //# of weekdays for partial week
		if (d < 0) {                 //subtracting weekdays 
			wkEnds = Math.ceil(d/5); //negative number weekends
			switch (startDay) {
				case 6:                  //start Sat. 1 less weekend
					if (partialWeek == 0 && wkEnds < 0) 
					wkEnds++;
					break;
				case 0:                   //starting day is Sunday
					if (partialWeek == 0) 
						d++;              //decrease days to add
					else 
						d--;              //increase days to add
					break;
				default:
					if (partialWeek <= -startDay) 
						wkEnds--;
			}
		} else if (d > 0) {            //adding weekdays
			wkEnds = Math.floor(d/5);
			var w = wkEnds;
			switch (startDay) {
				case 6:
					/* If staring day is Sat. and
					 * no partial week one less day needed
					 * if partial week one more day needed
					 */
					if (partialWeek == 0) 
						d--;
					else 
						d++;
					break;
				case 0:        //Sunday
					if (partialWeek == 0 && wkEnds > 0) 
					wkEnds--;
					break;
				default:
					if (5 - day < partialWeek) 
						wkEnds++;
			}
		}
		d += wkEnds * 2;
		this.addDays(d);
		return this;
	};

	Date.prototype.getWeekDays = function(d) {
		var wkEnds = 0;
		var days = Math.abs(this.getDaysBetween(d));
		var startDay = 0, endDay = 0;
		if (days) {
			if (d < this) {
				startDay = d.getDay();
				endDay = this.getDay();
			} else {
				startDay = this.getDay();
				endDay = d.getDay();
			}
			wkEnds = Math.floor(days/7);
			if (startDay != 6 && startDay > endDay) 
				wkEnds++;
			if (startDay != endDay && (startDay == 6 || endDay == 6) ) 
				days--;
			days -= (wkEnds * 2);
		}
		return days;
	};

	Date.prototype.getMonthsBetween = function(d) {
		var sDate, eDate;   
		var d1 = this.getFullYear() * 12 + this.getMonth();
		var d2 = d.getFullYear() * 12 + d.getMonth();
		var sign;
		var months = 0;
		if (this == d) {
			months = 0;
		} else if (d1 == d2) { //same year and month
			months = (d.getDate() - this.getDate())/this.lastday();
		} else {
			if (d1 <  d2) {
				sDate = this;
				eDate = d;
				sign = 1;
			} else {
				sDate = d;
				eDate = this;
				sign = -1;
			}
			var sAdj = sDate.lastday() - sDate.getDate();
			var eAdj = eDate.getDate();
			var adj = (sAdj + eAdj)/sDate.lastday() -1;
			months = Math.abs(d2 - d1) + adj;
			months = (months * sign);
		}
		return months;
	};

	Date.prototype.getYearsBetween = function(d) {
		var months = this.getMonthsBetween(d);
		return months/12;
	};

	Date.prototype.getAge = function() {
		var today = new Date();
		return this.getYearsBetween(today).toFixed(2);
	};

	Date.prototype.sameDayEachWeek = function (day, date) {
		var aDays = new Array();
		var eDate, nextDate, adj;
		if (this > date) {
			eDate = this;
			nextDate = date.copy();
		} else {
			eDate = date;
			nextDate = this.copy();
		}
		adj = (day - nextDate.getDay() + 7) %7;
		nextDate.setDate(nextDate.getDate() + adj);
		while (nextDate < eDate) {
			aDays[aDays.length] = nextDate.copy();
			nextDate.setDate(nextDate.getDate() + 7);
		}
		return aDays;
	};

	Date.toDate = function(d) {
		var newDate;
		if (arguments.length == 0) {
			newDate = new Date();
		} else if (d instanceof Date) {
			newDate = new Date(d.getTime());
		} else if (typeof d == "string") {
			newDate = new Date(d);
		} else if (arguments.length >= 3) {
			var dte = [0, 0, 0, 0, 0, 0];
			for (var i = 0; i < arguments.length && i < 7; i++) {
				dte[i] = arguments[i];
			}
			newDate = new Date(dte[0], dte[1], dte[2], dte[3], dte[4], dte[5]);
		} else if (typeof d == "number") {
			newDate = new Date(d);
		} else {
			newDate = null;
		}  
		if (newDate == "Invalid Date")
			return null;
		else
			return newDate;
	};

	Date.prototype.setLocale = function (lang) {
		if (lang && lang in Date.locales) {
			Date.locale = lang;
		}
		return this;
	};

	Date.prototype.getLocale = function () {
		return Date.locale || "en";
	};

	Date.prototype.getMonthName = function (lang) {
		var locale = "en";
		if (lang && lang in Date.locales) {
			locale = lang;
		} else if (Date.locale && Date.locale in Date.locales) {
			locale = Date.locale;
		}
		return Date.locales[locale].month_names[this.getMonth()];
	};

	Date.prototype.getMonthNameShort = function (lang) {
		var locale = "en";
		if (lang && lang in Date.locales) {
			locale = lang;
		} else if (Date.locale && Date.locale in Date.locales) {
			locale = Date.locale;
		}
		return Date.locales[locale].month_names_short[this.getMonth()];
	};

	Date.prototype.getDayName = function (lang) {
		var locale = "en";
		if (lang && lang in Date.locales) {
			locale = lang;
		} else if (Date.locale && Date.locale in Date.locales) {
			locale = Date.locale;
		}
		return Date.locales[locale].day_names[this.getDay()];
	};

	Date.prototype.getDayNameShort = function (lang) {
		var locale = "en";
		if (lang && lang in Date.locales) {
			locale = lang;
		} else if (Date.locale && Date.locale in Date.locales) {
			locale = Date.locale;
		}
		return Date.locales[locale].day_names_short[this.getDay()];
	};

	Date.prototype.getDateSuffix = function (lang) {
		var locale = "en";
		if (lang && lang in Date.locales) {
			locale = lang;
		} else if (Date.locale && Date.locale in Date.locales) {
			locale = Date.locale;
		}
		return Date.locales[locale].date_suffix(this.getDate());
	};

	Date.prototype.getMeridiem = function (isLower, lang) {
		var locale = "en";
		if (lang && lang in Date.locales) {
			locale = lang;
		} else if (Date.locale && Date.locale in Date.locales) {
			locale = Date.locale;
		}
		return Date.locales[locale].meridiem(this.getHours(), this.getMinutes(), isLower);
	};

	Date.prototype.getLastDate = function () {
		return (new Date(this.getFullYear(), this.getMonth() + 1, 0)).getDate();
	};

	/* languages from http://momentjs.com */

	Date.locales = {
		"en": {
			month_names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			month_names_short: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
			day_names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
			day_names_short: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
			date_suffix: function (date) {
				var day10 = ~~ (date % 100 / 10);
				var day1 = date % 10;
				if (day10 === 1) {
					return "th";
				} else if (day1 === 1) {
					return "st";
				} else if (day1 === 2) {
					return "nd";
				} else if (day1 === 3) {
					return "rd";
				} else {
					return "th";
				}
			},
			meridiem : function (hour, minute, isLower) {
				if (hour < 12) {
					return isLower ? "am" : "AM";
				} else {
					return isLower ? "pm" : "PM";
				}
			}
		},
		"ar-ma": {
			month_names: "ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§Ù_ÙÙÙÙÙ_ÙÙÙÙÙØ²_ØºØ´Øª_Ø´ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙØ¨Ø±_Ø¯Ø¬ÙØ¨Ø±".split("_"),
			month_names_short: "ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§Ù_ÙÙÙÙÙ_ÙÙÙÙÙØ²_ØºØ´Øª_Ø´ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙØ¨Ø±_Ø¯Ø¬ÙØ¨Ø±".split("_"),
			day_names: "Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥ØªÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª".split("_"),
			day_names_short: "Ø§Ø­Ø¯_Ø§ØªÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø§Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª".split("_"),
			date_suffix: function (date) {
				return "";
			},
			meridiem : function (hour, minute, isLower) {
				return "";
			}
		},
		"ar": {
			month_names: "ÙÙØ§ÙØ±/ ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ_ÙØ¨Ø±Ø§ÙØ±/ Ø´Ø¨Ø§Ø·_ÙØ§Ø±Ø³/ Ø¢Ø°Ø§Ø±_Ø£Ø¨Ø±ÙÙ/ ÙÙØ³Ø§Ù_ÙØ§ÙÙ/ Ø£ÙØ§Ø±_ÙÙÙÙÙ/ Ø­Ø²ÙØ±Ø§Ù_ÙÙÙÙÙ/ ØªÙÙØ²_Ø£ØºØ³Ø·Ø³/ Ø¢Ø¨_Ø³Ø¨ØªÙØ¨Ø±/ Ø£ÙÙÙÙ_Ø£ÙØªÙØ¨Ø±/ ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ_ÙÙÙÙØ¨Ø±/ ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ_Ø¯ÙØ³ÙØ¨Ø±/ ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ".split("_"),
			month_names_short: "ÙÙØ§ÙØ±/ ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ_ÙØ¨Ø±Ø§ÙØ±/ Ø´Ø¨Ø§Ø·_ÙØ§Ø±Ø³/ Ø¢Ø°Ø§Ø±_Ø£Ø¨Ø±ÙÙ/ ÙÙØ³Ø§Ù_ÙØ§ÙÙ/ Ø£ÙØ§Ø±_ÙÙÙÙÙ/ Ø­Ø²ÙØ±Ø§Ù_ÙÙÙÙÙ/ ØªÙÙØ²_Ø£ØºØ³Ø·Ø³/ Ø¢Ø¨_Ø³Ø¨ØªÙØ¨Ø±/ Ø£ÙÙÙÙ_Ø£ÙØªÙØ¨Ø±/ ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ_ÙÙÙÙØ¨Ø±/ ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ_Ø¯ÙØ³ÙØ¨Ø±/ ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ".split("_"),
			day_names: "Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª".split("_"),
			day_names_short: "Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª".split("_"),
			date_suffix: function (date) {
				return "";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"bg": {
			month_names: "ÑÐ½ÑÐ°ÑÐ¸_ÑÐµÐ²ÑÑÐ°ÑÐ¸_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐ¸Ð»_Ð¼Ð°Ð¹_ÑÐ½Ð¸_ÑÐ»Ð¸_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸_Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸_Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸_Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸".split("_"),
			month_names_short: "ÑÐ½Ñ_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_ÑÐ½Ð¸_ÑÐ»Ð¸_Ð°Ð²Ð³_ÑÐµÐ¿_Ð¾ÐºÑ_Ð½Ð¾Ðµ_Ð´ÐµÐº".split("_"),
			day_names: "Ð½ÐµÐ´ÐµÐ»Ñ_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÑÐ´Ð°_ÑÐµÑÐ²ÑÑÑÑÐº_Ð¿ÐµÑÑÐº_ÑÑÐ±Ð¾ÑÐ°".split("_"),
			day_names_short: "Ð½ÐµÐ´_Ð¿Ð¾Ð½_Ð²ÑÐ¾_ÑÑÑ_ÑÐµÑ_Ð¿ÐµÑ_ÑÑÐ±".split("_"),
			date_suffix: function (date) {
				var lastDigit = date % 10,
					last2Digits = date % 100;
				if (date === 0) {
					return '-ÐµÐ²';
				} else if (last2Digits === 0) {
					return '-ÐµÐ½';
				} else if (last2Digits > 10 && last2Digits < 20) {
					return '-ÑÐ¸';
				} else if (lastDigit === 1) {
					return '-Ð²Ð¸';
				} else if (lastDigit === 2) {
					return '-ÑÐ¸';
				} else if (lastDigit === 7 || lastDigit === 8) {
					return '-Ð¼Ð¸';
				} else {
					return '-ÑÐ¸';
				}
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"br": {
			month_names: "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),
			month_names_short: "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),
			day_names: "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),
			day_names_short: "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),
			date_suffix: function (date) {
				return (date === 1) ? 'aÃ±' : 'vet';
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"bs": {
			month_names: "januar_februar_mart_april_maj_juni_juli_avgust_septembar_oktobar_novembar_decembar".split("_"),
			month_names_short: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
			day_names: "nedjelja_ponedjeljak_utorak_srijeda_Äetvrtak_petak_subota".split("_"),
			day_names_short: "ned._pon._uto._sri._Äet._pet._sub.".split("_"),
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"ca": {
			month_names: "gener_febrer_marÃ§_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),
			month_names_short: "gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),
			day_names: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),
			day_names_short: "dg._dl._dt._dc._dj._dv._ds.".split("_"),
			date_suffix: function (date) {
				return "Âº";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"cs": {
			month_names: "leden_Ãºnor_bÅezen_duben_kvÄten_Äerven_Äervenec_srpen_zÃ¡ÅÃ­_ÅÃ­jen_listopad_prosinec".split("_"),
			month_names_short: "led_Ãºno_bÅe_dub_kvÄ_Ävn_Ävc_srp_zÃ¡Å_ÅÃ­j_lis_pro".split("_"),
			day_names: "nedÄle_pondÄlÃ­_ÃºterÃ½_stÅeda_Ätvrtek_pÃ¡tek_sobota".split("_"),
			day_names_short: "ne_po_Ãºt_st_Ät_pÃ¡_so".split("_"),
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"cv": {
			month_names: "ÐºÄÑÐ»Ð°Ñ_Ð½Ð°ÑÄÑ_Ð¿ÑÑ_Ð°ÐºÐ°_Ð¼Ð°Ð¹_Ã§ÄÑÑÐ¼Ðµ_ÑÑÄ_Ã§ÑÑÐ»Ð°_Ð°Ð²ÄÐ½_ÑÐ¿Ð°_ÑÓ³Ðº_ÑÐ°ÑÑÐ°Ð²".split("_"),
			month_names_short: "ÐºÄÑ_Ð½Ð°Ñ_Ð¿ÑÑ_Ð°ÐºÐ°_Ð¼Ð°Ð¹_Ã§ÄÑ_ÑÑÄ_Ã§ÑÑ_Ð°Ð²_ÑÐ¿Ð°_ÑÓ³Ðº_ÑÐ°Ñ".split("_"),
			day_names: "Ð²ÑÑÑÐ°ÑÐ½Ð¸ÐºÑÐ½_ÑÑÐ½ÑÐ¸ÐºÑÐ½_ÑÑÐ»Ð°ÑÐ¸ÐºÑÐ½_ÑÐ½ÐºÑÐ½_ÐºÄÃ§Ð½ÐµÑÐ½Ð¸ÐºÑÐ½_ÑÑÐ½ÐµÐºÑÐ½_ÑÄÐ¼Ð°ÑÐºÑÐ½".split("_"),
			day_names_short: "Ð²ÑÑ_ÑÑÐ½_ÑÑÐ»_ÑÐ½_ÐºÄÃ§_ÑÑÐ½_ÑÄÐ¼".split("_"),
			date_suffix: function (date) {
				return "-Ð¼ÄÑ";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"cy": {
			month_names: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),
			month_names_short: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),
			day_names: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),
			day_names_short: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),
			date_suffix: function (date) {
				var b = date,
					output = '',
					lookup = [
						'', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
						'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
					];

				if (b > 20) {
					if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
						output = 'fed'; // not 30ain, 70ain or 90ain
					} else {
						output = 'ain';
					}
				} else if (b > 0) {
					output = lookup[b];
				}

				return output;
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"da": {
			month_names: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),
			month_names_short: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
			day_names: "sÃ¸ndag_mandag_tirsdag_onsdag_torsdag_fredag_lÃ¸rdag".split("_"),
			day_names_short: "sÃ¸n_man_tir_ons_tor_fre_lÃ¸r".split("_"),
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"de": {
			month_names: "Januar_Februar_MÃ¤rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
			month_names_short: "Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
			day_names: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
			day_names_short: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"el": {
			month_names: "ÎÎ±Î½Î¿ÏÎ±ÏÎ¯Î¿Ï_Î¦ÎµÎ²ÏÎ¿ÏÎ±ÏÎ¯Î¿Ï_ÎÎ±ÏÏÎ¯Î¿Ï_ÎÏÏÎ¹Î»Î¯Î¿Ï_ÎÎ±ÎÎ¿Ï_ÎÎ¿ÏÎ½Î¯Î¿Ï_ÎÎ¿ÏÎ»Î¯Î¿Ï_ÎÏÎ³Î¿ÏÏÏÎ¿Ï_Î£ÎµÏÏÎµÎ¼Î²ÏÎ¯Î¿Ï_ÎÎºÏÏÎ²ÏÎ¯Î¿Ï_ÎÎ¿ÎµÎ¼Î²ÏÎ¯Î¿Ï_ÎÎµÎºÎµÎ¼Î²ÏÎ¯Î¿Ï".split("_"),
			month_names_short: "ÎÎ±Î½_Î¦ÎµÎ²_ÎÎ±Ï_ÎÏÏ_ÎÎ±Ï_ÎÎ¿ÏÎ½_ÎÎ¿ÏÎ»_ÎÏÎ³_Î£ÎµÏ_ÎÎºÏ_ÎÎ¿Îµ_ÎÎµÎº".split("_"),
			day_names: "ÎÏÏÎ¹Î±ÎºÎ®_ÎÎµÏÏÎ­ÏÎ±_Î¤ÏÎ¯ÏÎ·_Î¤ÎµÏÎ¬ÏÏÎ·_Î Î­Î¼ÏÏÎ·_Î Î±ÏÎ±ÏÎºÎµÏÎ®_Î£Î¬Î²Î²Î±ÏÎ¿".split("_"),
			day_names_short: "ÎÏÏ_ÎÎµÏ_Î¤ÏÎ¹_Î¤ÎµÏ_Î ÎµÎ¼_Î Î±Ï_Î£Î±Î²".split("_"),
			date_suffix: function (date) {
				return "Î·";
			},
			meridiem: function (hour, minute, isLower) {
				if (hour > 11) {
					return isLower ? 'Î¼Î¼' : 'ÎÎ';
				} else {
					return isLower ? 'ÏÎ¼' : 'Î Î';
				}
			}
		},
		"en-au": {
			month_names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			month_names_short: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
			day_names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
			day_names_short: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
			date_suffix: function (date) {
				var day10 = ~~ (date % 100 / 10);
				var day1 = date % 10;
				if (day10 === 1) {
					return "th";
				} else if (day1 === 1) {
					return "st";
				} else if (day1 === 2) {
					return "nd";
				} else if (day1 === 3) {
					return "rd";
				} else {
					return "th";
				}
			},
			meridiem: function (hour, minute, isLower) {
				if (hour < 12) {
					return isLower ? "am" : "AM";
				} else {
					return isLower ? "pm" : "PM";
				}
			}
		},
		"en-ca": {
			month_names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			month_names_short: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
			day_names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
			day_names_short: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
			date_suffix: function (date) {
				var day10 = ~~ (date % 100 / 10);
				var day1 = date % 10;
				if (day10 === 1) {
					return "th";
				} else if (day1 === 1) {
					return "st";
				} else if (day1 === 2) {
					return "nd";
				} else if (day1 === 3) {
					return "rd";
				} else {
					return "th";
				}
			},
			meridiem: function (hour, minute, isLower) {
				if (hour < 12) {
					return isLower ? "am" : "AM";
				} else {
					return isLower ? "pm" : "PM";
				}
			}
		},
		"en-gb": {
			month_names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			month_names_short: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
			day_names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
			day_names_short: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
			date_suffix: function (date) {
				var day10 = ~~ (date % 100 / 10);
				var day1 = date % 10;
				if (day10 === 1) {
					return "th";
				} else if (day1 === 1) {
					return "st";
				} else if (day1 === 2) {
					return "nd";
				} else if (day1 === 3) {
					return "rd";
				} else {
					return "th";
				}
			},
			meridiem: function (hour, minute, isLower) {
				if (hour < 12) {
					return isLower ? "am" : "AM";
				} else {
					return isLower ? "pm" : "PM";
				}
			}
		},
		"eo": {
			month_names: "januaro_februaro_marto_aprilo_majo_junio_julio_aÅ­gusto_septembro_oktobro_novembro_decembro".split("_"),
			month_names_short: "jan_feb_mar_apr_maj_jun_jul_aÅ­g_sep_okt_nov_dec".split("_"),
			day_names: "DimanÄo_Lundo_Mardo_Merkredo_Ä´aÅ­do_Vendredo_Sabato".split("_"),
			day_names_short: "Dim_Lun_Mard_Merk_Ä´aÅ­_Ven_Sab".split("_"),
			date_suffix: function (date) {
				return "a";
			},
			meridiem: function (hour, minute, isLower) {
				if (hour < 12) {
					return isLower ? 'a.t.m.' : 'A.T.M.';
				} else {
					return isLower ? 'p.t.m.' : 'P.T.M.';
				}
			}
		},
		"es": {
			month_names: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
			month_names_short: "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),
			day_names: "domingo_lunes_martes_miÃ©rcoles_jueves_viernes_sÃ¡bado".split("_"),
			day_names_short: "dom._lun._mar._miÃ©._jue._vie._sÃ¡b.".split("_"),
			date_suffix: function (date) {
				return "Âº";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"et": {
			month_names: "jaanuar_veebruar_mÃ¤rts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),
			month_names_short: "jaan_veebr_mÃ¤rts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),
			day_names: "pÃ¼hapÃ¤ev_esmaspÃ¤ev_teisipÃ¤ev_kolmapÃ¤ev_neljapÃ¤ev_reede_laupÃ¤ev".split("_"),
			day_names_short: "P_E_T_K_N_R_L".split("_"),
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"eu": {
			month_names: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),
			month_names_short: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),
			day_names: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),
			day_names_short: "ig._al._ar._az._og._ol._lr.".split("_"),
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"fa": {
			month_names: 'ÚØ§ÙÙÛÙ_ÙÙØ±ÛÙ_ÙØ§Ø±Ø³_Ø¢ÙØ±ÛÙ_ÙÙ_ÚÙØ¦Ù_ÚÙØ¦ÛÙ_Ø§ÙØª_Ø³Ù¾ØªØ§ÙØ¨Ø±_Ø§Ú©ØªØ¨Ø±_ÙÙØ§ÙØ¨Ø±_Ø¯Ø³Ø§ÙØ¨Ø±'.split('_'),
			month_names_short: 'ÚØ§ÙÙÛÙ_ÙÙØ±ÛÙ_ÙØ§Ø±Ø³_Ø¢ÙØ±ÛÙ_ÙÙ_ÚÙØ¦Ù_ÚÙØ¦ÛÙ_Ø§ÙØª_Ø³Ù¾ØªØ§ÙØ¨Ø±_Ø§Ú©ØªØ¨Ø±_ÙÙØ§ÙØ¨Ø±_Ø¯Ø³Ø§ÙØ¨Ø±'.split('_'),
			day_names: 'ÛÚ©\u200cØ´ÙØ¨Ù_Ø¯ÙØ´ÙØ¨Ù_Ø³Ù\u200cØ´ÙØ¨Ù_ÚÙØ§Ø±Ø´ÙØ¨Ù_Ù¾ÙØ¬\u200cØ´ÙØ¨Ù_Ø¬ÙØ¹Ù_Ø´ÙØ¨Ù'.split('_'),
			day_names_short: 'ÛÚ©\u200cØ´ÙØ¨Ù_Ø¯ÙØ´ÙØ¨Ù_Ø³Ù\u200cØ´ÙØ¨Ù_ÚÙØ§Ø±Ø´ÙØ¨Ù_Ù¾ÙØ¬\u200cØ´ÙØ¨Ù_Ø¬ÙØ¹Ù_Ø´ÙØ¨Ù'.split('_'),
			meridiem: function (hour, minute, isLower) {
				if (hour < 12) {
					return "ÙØ¨Ù Ø§Ø² Ø¸ÙØ±";
				} else {
					return "Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±";
				}
			},
			date_suffix: function (date) {
				return 'Ù';
			}
		},
		"fi": {
			month_names: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesÃ¤kuu_heinÃ¤kuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),
			month_names_short: "tammi_helmi_maalis_huhti_touko_kesÃ¤_heinÃ¤_elo_syys_loka_marras_joulu".split("_"),
			day_names: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),
			day_names_short: "su_ma_ti_ke_to_pe_la".split("_"),
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"fo": {
			month_names: "januar_februar_mars_aprÃ­l_mai_juni_juli_august_september_oktober_november_desember".split("_"),
			month_names_short: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
			day_names: "sunnudagur_mÃ¡nadagur_tÃ½sdagur_mikudagur_hÃ³sdagur_frÃ­ggjadagur_leygardagur".split("_"),
			day_names_short: "sun_mÃ¡n_tÃ½s_mik_hÃ³s_frÃ­_ley".split("_"),
			date_suffix: function () {
				return '.';
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"fr-ca": {
			month_names: "janvier_fÃ©vrier_mars_avril_mai_juin_juillet_aoÃ»t_septembre_octobre_novembre_dÃ©cembre".split("_"),
			month_names_short: "janv._fÃ©vr._mars_avr._mai_juin_juil._aoÃ»t_sept._oct._nov._dÃ©c.".split("_"),
			day_names: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
			day_names_short: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
			date_suffix: function (date) {
				return (date === 1 ? 'er' : '');
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"fr": {
			month_names: "janvier_fÃ©vrier_mars_avril_mai_juin_juillet_aoÃ»t_septembre_octobre_novembre_dÃ©cembre".split("_"),
			month_names_short: "janv._fÃ©vr._mars_avr._mai_juin_juil._aoÃ»t_sept._oct._nov._dÃ©c.".split("_"),
			day_names: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
			day_names_short: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
			date_suffix: function (date) {
				return (date === 1 ? 'er' : '');
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"gl": {
			month_names: "Xaneiro_Febreiro_Marzo_Abril_Maio_XuÃ±o_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro".split("_"),
			month_names_short: "Xan._Feb._Mar._Abr._Mai._XuÃ±._Xul._Ago._Set._Out._Nov._Dec.".split("_"),
			day_names: "Domingo_Luns_Martes_MÃ©rcores_Xoves_Venres_SÃ¡bado".split("_"),
			day_names_short: "Dom._Lun._Mar._MÃ©r._Xov._Ven._SÃ¡b.".split("_"),
			date_suffix: function (date) {
				return 'Âº';
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"he": {
			month_names: "×× ×××¨_×¤××¨×××¨_××¨×¥_××¤×¨××_×××_××× ×_××××_×××××¡×_×¡×¤××××¨_×××§××××¨_× ×××××¨_××¦×××¨".split("_"),
			month_names_short: "×× ××³_×¤××¨×³_××¨×¥_××¤×¨×³_×××_××× ×_××××_××××³_×¡×¤××³_×××§×³_× ×××³_××¦××³".split("_"),
			day_names: "×¨××©××_×©× ×_×©×××©×_×¨×××¢×_××××©×_×©××©×_×©××ª".split("_"),
			day_names_short: "××³_××³_××³_××³_××³_××³_×©×³".split("_"),
			date_suffix: function (date) {
				return "";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"hi": {
			month_names: 'à¤à¤¨à¤µà¤°à¥_à¤«à¤¼à¤°à¤µà¤°à¥_à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¥à¤²_à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²à¤¾à¤_à¤à¤à¤¸à¥à¤¤_à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°_à¤à¤à¥à¤à¥à¤¬à¤°_à¤¨à¤µà¤®à¥à¤¬à¤°_à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°'.split("_"),
			month_names_short: 'à¤à¤¨._à¤«à¤¼à¤°._à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¥._à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²._à¤à¤._à¤¸à¤¿à¤¤._à¤à¤à¥à¤à¥._à¤¨à¤µ._à¤¦à¤¿à¤¸.'.split("_"),
			day_names: 'à¤°à¤µà¤¿à¤µà¤¾à¤°_à¤¸à¥à¤®à¤µà¤¾à¤°_à¤®à¤à¤à¤²à¤µà¤¾à¤°_à¤¬à¥à¤§à¤µà¤¾à¤°_à¤à¥à¤°à¥à¤µà¤¾à¤°_à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°_à¤¶à¤¨à¤¿à¤µà¤¾à¤°'.split("_"),
			day_names_short: 'à¤°à¤µà¤¿_à¤¸à¥à¤®_à¤®à¤à¤à¤²_à¤¬à¥à¤§_à¤à¥à¤°à¥_à¤¶à¥à¤à¥à¤°_à¤¶à¤¨à¤¿'.split("_"),
			meridiem: function (hour, minute, isLower) {
				if (hour < 4) {
					return "à¤°à¤¾à¤¤";
				} else if (hour < 10) {
					return "à¤¸à¥à¤¬à¤¹";
				} else if (hour < 17) {
					return "à¤¦à¥à¤ªà¤¹à¤°";
				} else if (hour < 20) {
					return "à¤¶à¤¾à¤®";
				} else {
					return "à¤°à¤¾à¤¤";
				}
			},
			date_suffix: function (date) {
				return "";
			}
		},
		"hr": {
			month_names: "sjeÄanj_veljaÄa_oÅ¾ujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_"),
			month_names_short: "sje._vel._oÅ¾u._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),
			day_names: "nedjelja_ponedjeljak_utorak_srijeda_Äetvrtak_petak_subota".split("_"),
			day_names_short: "ned._pon._uto._sri._Äet._pet._sub.".split("_"),
			date_suffix: function () {
				return '.';
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"hu": {
			month_names: "januÃ¡r_februÃ¡r_mÃ¡rcius_Ã¡prilis_mÃ¡jus_jÃºnius_jÃºlius_augusztus_szeptember_oktÃ³ber_november_december".split("_"),
			month_names_short: "jan_feb_mÃ¡rc_Ã¡pr_mÃ¡j_jÃºn_jÃºl_aug_szept_okt_nov_dec".split("_"),
			day_names: "vasÃ¡rnap_hÃ©tfÅ_kedd_szerda_csÃ¼tÃ¶rtÃ¶k_pÃ©ntek_szombat".split("_"),
			day_names_short: "vas_hÃ©t_kedd_sze_csÃ¼t_pÃ©n_szo".split("_"),
			meridiem: function (hour, minute, isLower) {
				if (hour < 12) {
					return isLower === true ? 'de' : 'DE';
				} else {
					return isLower === true ? 'du' : 'DU';
				}
			},
			date_suffix: function () {
				return '.';
			}
		},
		"hy-am": {
			month_names: 'Õ°Õ¸ÖÕ¶Õ¾Õ¡Ö_ÖÕ¥Õ¿ÖÕ¾Õ¡Ö_Õ´Õ¡ÖÕ¿_Õ¡ÕºÖÕ«Õ¬_Õ´Õ¡ÕµÕ«Õ½_Õ°Õ¸ÖÕ¶Õ«Õ½_Õ°Õ¸ÖÕ¬Õ«Õ½_ÖÕ£Õ¸Õ½Õ¿Õ¸Õ½_Õ½Õ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥Ö_Õ°Õ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö_Õ¶Õ¸ÕµÕ¥Õ´Õ¢Õ¥Ö_Õ¤Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö'.split('_'),
			month_names_short: 'Õ°Õ¶Õ¾_ÖÕ¿Ö_Õ´ÖÕ¿_Õ¡ÕºÖ_Õ´ÕµÕ½_Õ°Õ¶Õ½_Õ°Õ¬Õ½_ÖÕ£Õ½_Õ½ÕºÕ¿_Õ°Õ¯Õ¿_Õ¶Õ´Õ¢_Õ¤Õ¯Õ¿'.split('_'),
			day_names: 'Õ¯Õ«ÖÕ¡Õ¯Õ«_Õ¥ÖÕ¯Õ¸ÖÕ·Õ¡Õ¢Õ©Õ«_Õ¥ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«_Õ¹Õ¸ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«_Õ°Õ«Õ¶Õ£Õ·Õ¡Õ¢Õ©Õ«_Õ¸ÖÖÕ¢Õ¡Õ©_Õ·Õ¡Õ¢Õ¡Õ©'.split('_'),
			day_names_short: "Õ¯ÖÕ¯_Õ¥ÖÕ¯_Õ¥ÖÖ_Õ¹ÖÖ_Õ°Õ¶Õ£_Õ¸ÖÖÕ¢_Õ·Õ¢Õ©".split("_"),
			date_suffix: function (date) {
				return "";
			},
			meridiem: function (hour, minute, isLower) {
				if (hour < 4) {
					return "Õ£Õ«Õ·Õ¥ÖÕ¾Õ¡";
				} else if (hour < 12) {
					return "Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿Õ¾Õ¡";
				} else if (hour < 17) {
					return "ÖÕ¥ÖÕ¥Õ¯Õ¾Õ¡";
				} else {
					return "Õ¥ÖÕ¥Õ¯Õ¸ÕµÕ¡Õ¶";
				}
			}
		},
		"id": {
			month_names: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),
			month_names_short: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),
			day_names: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),
			day_names_short: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),
			meridiem: function (hour, minute, isLower) {
				if (hour < 11) {
					return 'pagi';
				} else if (hour < 15) {
					return 'siang';
				} else if (hour < 19) {
					return 'sore';
				} else {
					return 'malam';
				}
			},
			date_suffix: function (date) {
				return "";
			}
		},
		"is": {
			month_names: "janÃºar_febrÃºar_mars_aprÃ­l_maÃ­_jÃºnÃ­_jÃºlÃ­_Ã¡gÃºst_september_oktÃ³ber_nÃ³vember_desember".split("_"),
			month_names_short: "jan_feb_mar_apr_maÃ­_jÃºn_jÃºl_Ã¡gÃº_sep_okt_nÃ³v_des".split("_"),
			day_names: "sunnudagur_mÃ¡nudagur_Ã¾riÃ°judagur_miÃ°vikudagur_fimmtudagur_fÃ¶studagur_laugardagur".split("_"),
			day_names_short: "sun_mÃ¡n_Ã¾ri_miÃ°_fim_fÃ¶s_lau".split("_"),
			date_suffix: function () {
				return '.';
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"it": {
			month_names: "Gennaio_Febbraio_Marzo_Aprile_Maggio_Giugno_Luglio_Agosto_Settembre_Ottobre_Novembre_Dicembre".split("_"),
			month_names_short: "Gen_Feb_Mar_Apr_Mag_Giu_Lug_Ago_Set_Ott_Nov_Dic".split("_"),
			day_names: "Domenica_LunedÃ¬_MartedÃ¬_MercoledÃ¬_GiovedÃ¬_VenerdÃ¬_Sabato".split("_"),
			day_names_short: "Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),
			date_suffix: function () {
				return 'Âº';
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"ja": {
			month_names: "1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ".split("_"),
			month_names_short: "1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ".split("_"),
			day_names: "æ¥ææ¥_æææ¥_ç«ææ¥_æ°´ææ¥_æ¨ææ¥_éææ¥_åææ¥".split("_"),
			day_names_short: "æ¥_æ_ç«_æ°´_æ¨_é_å".split("_"),
			meridiem: function (hour, minute, isLower) {
				if (hour < 12) {
					return "åå";
				} else {
					return "åå¾";
				}
			},
			date_suffix: function (date) {
				return "";
			}
		},
		"ka": {
			month_names: 'áááááá á_ááááá áááá_ááá á¢á_ááá ááá_áááá¡á_ááááá¡á_ááááá¡á_ááááá¡á¢á_á¡áá¥á¢ááááá á_áá¥á¢ááááá á_ááááááá á_áááááááá á'.split('_'),
			month_names_short: "ááá_ááá_ááá _ááá _ááá_ááá_ááá_ááá_á¡áá¥_áá¥á¢_ááá_ááá".split("_"),
			day_names: 'áááá á_áá á¨ááááá_á¡ááá¨ááááá_ááá®á¨ááááá_á®á£áá¨ááááá_ááá áá¡áááá_á¨ááááá'.split('_'),
			day_names_short: "ááá_áá á¨_á¡áá_ááá®_á®á£á_ááá _á¨áá".split("_"),
			date_suffix: function (date) {
				if (date === 0) {
					return "";
				}

				if (date === 1) {
					return "-áá";
				}

				if ((date < 20) || (date <= 100 && (date % 20 === 0)) || (date % 100 === 0)) {
					return "áá-";
				}

				return "-á";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"km": {
			month_names: "áááá¶_áá»áááá_áá·áá¶_áááá¶_á§ááá¶_áá·áá»áá¶_áááááá¶_áá¸á á¶_ááááá¶_áá»áá¶_áá·áááá·áá¶_áááá¼".split("_"),
			month_names_short: "áááá¶_áá»áááá_áá·áá¶_áááá¶_á§ááá¶_áá·áá»áá¶_áááááá¶_áá¸á á¶_ááááá¶_áá»áá¶_áá·áááá·áá¶_áááá¼".split("_"),
			day_names: "á¢á¶áá·ááá_ááááá_á¢áááá¶á_áá»á_áááá ááááá·á_áá»ááá_áááá".split("_"),
			day_names_short: "á¢á¶áá·ááá_ááááá_á¢áááá¶á_áá»á_áááá ááááá·á_áá»ááá_áááá".split("_"),
			date_suffix: function (date) {
				return "";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"ko": {
			month_names: "1ì_2ì_3ì_4ì_5ì_6ì_7ì_8ì_9ì_10ì_11ì_12ì".split("_"),
			month_names_short: "1ì_2ì_3ì_4ì_5ì_6ì_7ì_8ì_9ì_10ì_11ì_12ì".split("_"),
			day_names: "ì¼ìì¼_ììì¼_íìì¼_ììì¼_ëª©ìì¼_ê¸ìì¼_í ìì¼".split("_"),
			day_names_short: "ì¼_ì_í_ì_ëª©_ê¸_í ".split("_"),
			date_suffix: function (date) {
				return "ì¼";
			},
			meridiem: function (hour, minute, isLower) {
				return hour < 12 ? 'ì¤ì ' : 'ì¤í';
			}
		},
		"lb": {
			month_names: "Januar_Februar_MÃ¤erz_AbrÃ«ll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
			month_names_short: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
			day_names: "Sonndeg_MÃ©indeg_DÃ«nschdeg_MÃ«ttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),
			day_names_short: "So._MÃ©._DÃ«._MÃ«._Do._Fr._Sa.".split("_"),
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"lt": {
			month_names: "sausio_vasario_kovo_balandÅ¾io_geguÅ¾Äs_birÅ¾Älio_liepos_rugpjÅ«Äio_rugsÄjo_spalio_lapkriÄio_gruodÅ¾io".split("_"),
			month_names_short: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),
			day_names: "pirmadienis_antradienis_treÄiadienis_ketvirtadienis_penktadienis_Å¡eÅ¡tadienis_sekmadienis".split("_"),
			day_names_short: "Sek_Pir_Ant_Tre_Ket_Pen_Å eÅ¡".split("_"),
			date_suffix: function (date) {
				return "-oji";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"lv": {
			month_names: "janvÄris_februÄris_marts_aprÄ«lis_maijs_jÅ«nijs_jÅ«lijs_augusts_septembris_oktobris_novembris_decembris".split("_"),
			month_names_short: "jan_feb_mar_apr_mai_jÅ«n_jÅ«l_aug_sep_okt_nov_dec".split("_"),
			day_names: "svÄtdiena_pirmdiena_otrdiena_treÅ¡diena_ceturtdiena_piektdiena_sestdiena".split("_"),
			day_names_short: "Sv_P_O_T_C_Pk_S".split("_"),
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"mk": {
			month_names: "ÑÐ°Ð½ÑÐ°ÑÐ¸_ÑÐµÐ²ÑÑÐ°ÑÐ¸_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐ¸Ð»_Ð¼Ð°Ñ_ÑÑÐ½Ð¸_ÑÑÐ»Ð¸_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸_Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸_Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸_Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸".split("_"),
			month_names_short: "ÑÐ°Ð½_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ñ_ÑÑÐ½_ÑÑÐ»_Ð°Ð²Ð³_ÑÐµÐ¿_Ð¾ÐºÑ_Ð½Ð¾Ðµ_Ð´ÐµÐº".split("_"),
			day_names: "Ð½ÐµÐ´ÐµÐ»Ð°_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÐµÐ´Ð°_ÑÐµÑÐ²ÑÑÐ¾Ðº_Ð¿ÐµÑÐ¾Ðº_ÑÐ°Ð±Ð¾ÑÐ°".split("_"),
			day_names_short: "Ð½ÐµÐ´_Ð¿Ð¾Ð½_Ð²ÑÐ¾_ÑÑÐµ_ÑÐµÑ_Ð¿ÐµÑ_ÑÐ°Ð±".split("_"),
			date_suffix: function (date) {
				var lastDigit = date % 10,
					last2Digits = date % 100;
				if (date === 0) {
					return '-ÐµÐ²';
				} else if (last2Digits === 0) {
					return '-ÐµÐ½';
				} else if (last2Digits > 10 && last2Digits < 20) {
					return '-ÑÐ¸';
				} else if (lastDigit === 1) {
					return '-Ð²Ð¸';
				} else if (lastDigit === 2) {
					return '-ÑÐ¸';
				} else if (lastDigit === 7 || lastDigit === 8) {
					return '-Ð¼Ð¸';
				} else {
					return '-ÑÐ¸';
				}
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"ml": {
			month_names: 'à´à´¨àµà´µà´°à´¿_à´«àµà´¬àµà´°àµà´µà´°à´¿_à´®à´¾àµ¼à´àµà´àµ_à´à´ªàµà´°à´¿àµ½_à´®àµà´¯àµ_à´àµàµº_à´àµà´²àµ_à´à´à´¸àµà´±àµà´±àµ_à´¸àµà´ªàµà´±àµà´±à´à´¬àµ¼_à´à´àµà´àµà´¬àµ¼_à´¨à´µà´à´¬àµ¼_à´¡à´¿à´¸à´à´¬àµ¼'.split("_"),
			month_names_short: 'à´à´¨àµ._à´«àµà´¬àµà´°àµ._à´®à´¾àµ¼._à´à´ªàµà´°à´¿._à´®àµà´¯àµ_à´àµàµº_à´àµà´²àµ._à´à´._à´¸àµà´ªàµà´±àµà´±._à´à´àµà´àµ._à´¨à´µà´._à´¡à´¿à´¸à´.'.split("_"),
			day_names: 'à´à´¾à´¯à´±à´¾à´´àµà´_à´¤à´¿à´àµà´à´³à´¾à´´àµà´_à´àµà´µàµà´µà´¾à´´àµà´_à´¬àµà´§à´¨à´¾à´´àµà´_à´µàµà´¯à´¾à´´à´¾à´´àµà´_à´µàµà´³àµà´³à´¿à´¯à´¾à´´àµà´_à´¶à´¨à´¿à´¯à´¾à´´àµà´'.split("_"),
			day_names_short: 'à´à´¾à´¯àµ¼_à´¤à´¿à´àµà´àµ¾_à´àµà´µàµà´µ_à´¬àµà´§àµ»_à´µàµà´¯à´¾à´´à´_à´µàµà´³àµà´³à´¿_à´¶à´¨à´¿'.split("_"),
			meridiem: function (hour, minute, isLower) {
				if (hour < 4) {
					return "à´°à´¾à´¤àµà´°à´¿";
				} else if (hour < 12) {
					return "à´°à´¾à´µà´¿à´²àµ";
				} else if (hour < 17) {
					return "à´à´àµà´ à´à´´à´¿à´àµà´àµ";
				} else if (hour < 20) {
					return "à´µàµà´àµà´¨àµà´¨àµà´°à´";
				} else {
					return "à´°à´¾à´¤àµà´°à´¿";
				}
			},
			date_suffix: function (date) {
				return "";
			}
		},
		"mr": {
			month_names: 'à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥_à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥_à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¤¿à¤²_à¤®à¥_à¤à¥à¤¨_à¤à¥à¤²à¥_à¤à¤à¤¸à¥à¤_à¤¸à¤ªà¥à¤à¥à¤à¤¬à¤°_à¤à¤à¥à¤à¥à¤¬à¤°_à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°_à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°'.split("_"),
			month_names_short: 'à¤à¤¾à¤¨à¥._à¤«à¥à¤¬à¥à¤°à¥._à¤®à¤¾à¤°à¥à¤._à¤à¤ªà¥à¤°à¤¿._à¤®à¥._à¤à¥à¤¨._à¤à¥à¤²à¥._à¤à¤._à¤¸à¤ªà¥à¤à¥à¤._à¤à¤à¥à¤à¥._à¤¨à¥à¤µà¥à¤¹à¥à¤._à¤¡à¤¿à¤¸à¥à¤.'.split("_"),
			day_names: 'à¤°à¤µà¤¿à¤µà¤¾à¤°_à¤¸à¥à¤®à¤µà¤¾à¤°_à¤®à¤à¤à¤³à¤µà¤¾à¤°_à¤¬à¥à¤§à¤µà¤¾à¤°_à¤à¥à¤°à¥à¤µà¤¾à¤°_à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°_à¤¶à¤¨à¤¿à¤µà¤¾à¤°'.split("_"),
			day_names_short: 'à¤°à¤µà¤¿_à¤¸à¥à¤®_à¤®à¤à¤à¤³_à¤¬à¥à¤§_à¤à¥à¤°à¥_à¤¶à¥à¤à¥à¤°_à¤¶à¤¨à¤¿'.split("_"),
			meridiem: function (hour, minute, isLower) {
				if (hour < 4) {
					return "à¤°à¤¾à¤¤à¥à¤°à¥";
				} else if (hour < 10) {
					return "à¤¸à¤à¤¾à¤³à¥";
				} else if (hour < 17) {
					return "à¤¦à¥à¤ªà¤¾à¤°à¥";
				} else if (hour < 20) {
					return "à¤¸à¤¾à¤¯à¤à¤à¤¾à¤³à¥";
				} else {
					return "à¤°à¤¾à¤¤à¥à¤°à¥";
				}
			},
			date_suffix: function (date) {
				return "";
			}
		},
		"ms-my": {
			month_names: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
			month_names_short: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
			day_names: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
			day_names_short: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
			meridiem: function (hour, minute, isLower) {
				if (hour < 11) {
					return 'pagi';
				} else if (hour < 15) {
					return 'tengahari';
				} else if (hour < 19) {
					return 'petang';
				} else {
					return 'malam';
				}
			},
			date_suffix: function (date) {
				return "";
			}
		},
		"nb": {
			month_names: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
			month_names_short: "jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),
			day_names: "sÃ¸ndag_mandag_tirsdag_onsdag_torsdag_fredag_lÃ¸rdag".split("_"),
			day_names_short: "sÃ¸._ma._ti._on._to._fr._lÃ¸.".split("_"),
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"ne": {
			month_names: 'à¤à¤¨à¤µà¤°à¥_à¤«à¥à¤¬à¥à¤°à¥à¤µà¤°à¥_à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¤¿à¤²_à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²à¤¾à¤_à¤à¤à¤·à¥à¤_à¤¸à¥à¤ªà¥à¤à¥à¤®à¥à¤¬à¤°_à¤à¤à¥à¤à¥à¤¬à¤°_à¤¨à¥à¤­à¥à¤®à¥à¤¬à¤°_à¤¡à¤¿à¤¸à¥à¤®à¥à¤¬à¤°'.split("_"),
			month_names_short: 'à¤à¤¨._à¤«à¥à¤¬à¥à¤°à¥._à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¤¿._à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²à¤¾à¤._à¤à¤._à¤¸à¥à¤ªà¥à¤._à¤à¤à¥à¤à¥._à¤¨à¥à¤­à¥._à¤¡à¤¿à¤¸à¥.'.split("_"),
			day_names: 'à¤à¤à¤¤à¤¬à¤¾à¤°_à¤¸à¥à¤®à¤¬à¤¾à¤°_à¤®à¤à¥à¤à¤²à¤¬à¤¾à¤°_à¤¬à¥à¤§à¤¬à¤¾à¤°_à¤¬à¤¿à¤¹à¤¿à¤¬à¤¾à¤°_à¤¶à¥à¤à¥à¤°à¤¬à¤¾à¤°_à¤¶à¤¨à¤¿à¤¬à¤¾à¤°'.split("_"),
			day_names_short: 'à¤à¤à¤¤._à¤¸à¥à¤®._à¤®à¤à¥à¤à¤²._à¤¬à¥à¤§._à¤¬à¤¿à¤¹à¤¿._à¤¶à¥à¤à¥à¤°._à¤¶à¤¨à¤¿.'.split("_"),
			meridiem: function (hour, minute, isLower) {
				if (hour < 3) {
					return "à¤°à¤¾à¤¤à¥";
				} else if (hour < 10) {
					return "à¤¬à¤¿à¤¹à¤¾à¤¨";
				} else if (hour < 15) {
					return "à¤¦à¤¿à¤à¤à¤¸à¥";
				} else if (hour < 18) {
					return "à¤¬à¥à¤²à¥à¤à¤¾";
				} else if (hour < 20) {
					return "à¤¸à¤¾à¤à¤";
				} else {
					return "à¤°à¤¾à¤¤à¥";
				}
			},
			date_suffix: function (date) {
				return "";
			}
		},
		"nl": {
			month_names: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
			month_names_short: "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),
			day_names: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
			day_names_short: "zo._ma._di._wo._do._vr._za.".split("_"),
			date_suffix: function (date) {
				return ((date === 1 || date === 8 || date >= 20) ? 'ste' : 'de');
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"nn": {
			month_names: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
			month_names_short: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
			day_names: "sundag_mÃ¥ndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),
			day_names_short: "sun_mÃ¥n_tys_ons_tor_fre_lau".split("_"),
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"pl": {
			month_names: "styczeÅ_luty_marzec_kwiecieÅ_maj_czerwiec_lipiec_sierpieÅ_wrzesieÅ_paÅºdziernik_listopad_grudzieÅ".split("_"),
			month_names_short: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paÅº_lis_gru".split("_"),
			day_names: "niedziela_poniedziaÅek_wtorek_Åroda_czwartek_piÄtek_sobota".split("_"),
			day_names_short: "nie_pon_wt_År_czw_pt_sb".split("_"),
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"pt-br": {
			month_names: "janeiro_fevereiro_marÃ§o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
			month_names_short: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
			day_names: "domingo_segunda-feira_terÃ§a-feira_quarta-feira_quinta-feira_sexta-feira_sÃ¡bado".split("_"),
			day_names_short: "dom_seg_ter_qua_qui_sex_sÃ¡b".split("_"),
			date_suffix: function (date) {
				return "Âº";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"pt": {
			month_names: "janeiro_fevereiro_marÃ§o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
			month_names_short: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
			day_names: "domingo_segunda-feira_terÃ§a-feira_quarta-feira_quinta-feira_sexta-feira_sÃ¡bado".split("_"),
			day_names_short: "dom_seg_ter_qua_qui_sex_sÃ¡b".split("_"),
			date_suffix: function (date) {
				return "Âº";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"ro": {
			month_names: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),
			month_names_short: "ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),
			day_names: "duminicÄ_luni_marÈi_miercuri_joi_vineri_sÃ¢mbÄtÄ".split("_"),
			day_names_short: "Dum_Lun_Mar_Mie_Joi_Vin_SÃ¢m".split("_"),
			date_suffix: function (date) {
				return "";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"ru": {
			month_names: 'ÑÐ½Ð²Ð°ÑÑ_ÑÐµÐ²ÑÐ°Ð»Ñ_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐµÐ»Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ½ÑÑÐ±ÑÑ_Ð¾ÐºÑÑÐ±ÑÑ_Ð½Ð¾ÑÐ±ÑÑ_Ð´ÐµÐºÐ°Ð±ÑÑ'.split('_'),
			month_names_short: 'ÑÐ½Ð²_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³_ÑÐµÐ½_Ð¾ÐºÑ_Ð½Ð¾Ñ_Ð´ÐµÐº'.split('_'),
			day_names: 'Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÐµÐ´Ð°_ÑÐµÑÐ²ÐµÑÐ³_Ð¿ÑÑÐ½Ð¸ÑÐ°_ÑÑÐ±Ð±Ð¾ÑÐ°'.split('_'),
			day_names_short: "Ð²Ñ_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±".split("_"),
			meridiem: function (hour, minute, isLower) {
				if (hour < 4) {
					return "Ð½Ð¾ÑÐ¸";
				} else if (hour < 12) {
					return "ÑÑÑÐ°";
				} else if (hour < 17) {
					return "Ð´Ð½Ñ";
				} else {
					return "Ð²ÐµÑÐµÑÐ°";
				}
			},
			date_suffix: function (date) {
				return '-Ð³Ð¾';
			}
		},
		"sk": {
			month_names: "januÃ¡r_februÃ¡r_marec_aprÃ­l_mÃ¡j_jÃºn_jÃºl_august_september_oktÃ³ber_november_december".split("_"),
			month_names_short: "jan_feb_mar_apr_mÃ¡j_jÃºn_jÃºl_aug_sep_okt_nov_dec".split("_"),
			day_names: "nedeÄ¾a_pondelok_utorok_streda_Å¡tvrtok_piatok_sobota".split("_"),
			day_names_short: "ne_po_ut_st_Å¡t_pi_so".split("_"),
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"sl": {
			month_names: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),
			month_names_short: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
			day_names: "nedelja_ponedeljek_torek_sreda_Äetrtek_petek_sobota".split("_"),
			day_names_short: "ned._pon._tor._sre._Äet._pet._sob.".split("_"),
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"sq": {
			month_names: "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_NÃ«ntor_Dhjetor".split("_"),
			month_names_short: "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_NÃ«n_Dhj".split("_"),
			day_names: "E Diel_E HÃ«nÃ«_E MartÃ«_E MÃ«rkurÃ«_E Enjte_E Premte_E ShtunÃ«".split("_"),
			day_names_short: "Die_HÃ«n_Mar_MÃ«r_Enj_Pre_Sht".split("_"),
			meridiem: function (hour, minute, isLower) {
				return hour < 12 ? 'PD' : 'MD';
			},
			date_suffix: function (date) {
				return ".";
			}
		},
		"sr-cyr": {
			month_names: ['ÑÐ°Ð½ÑÐ°Ñ', 'ÑÐµÐ±ÑÑÐ°Ñ', 'Ð¼Ð°ÑÑ', 'Ð°Ð¿ÑÐ¸Ð»', 'Ð¼Ð°Ñ', 'ÑÑÐ½', 'ÑÑÐ»', 'Ð°Ð²Ð³ÑÑÑ', 'ÑÐµÐ¿ÑÐµÐ¼Ð±Ð°Ñ', 'Ð¾ÐºÑÐ¾Ð±Ð°Ñ', 'Ð½Ð¾Ð²ÐµÐ¼Ð±Ð°Ñ', 'Ð´ÐµÑÐµÐ¼Ð±Ð°Ñ'],
			month_names_short: ['ÑÐ°Ð½.', 'ÑÐµÐ±.', 'Ð¼Ð°Ñ.', 'Ð°Ð¿Ñ.', 'Ð¼Ð°Ñ', 'ÑÑÐ½', 'ÑÑÐ»', 'Ð°Ð²Ð³.', 'ÑÐµÐ¿.', 'Ð¾ÐºÑ.', 'Ð½Ð¾Ð².', 'Ð´ÐµÑ.'],
			day_names: ['Ð½ÐµÐ´ÐµÑÐ°', 'Ð¿Ð¾Ð½ÐµÐ´ÐµÑÐ°Ðº', 'ÑÑÐ¾ÑÐ°Ðº', 'ÑÑÐµÐ´Ð°', 'ÑÐµÑÐ²ÑÑÐ°Ðº', 'Ð¿ÐµÑÐ°Ðº', 'ÑÑÐ±Ð¾ÑÐ°'],
			day_names_short: ['Ð½ÐµÐ´.', 'Ð¿Ð¾Ð½.', 'ÑÑÐ¾.', 'ÑÑÐµ.', 'ÑÐµÑ.', 'Ð¿ÐµÑ.', 'ÑÑÐ±.'],
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"sr": {
			month_names: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
			month_names_short: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
			day_names: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'Äetvrtak', 'petak', 'subota'],
			day_names_short: ['ned.', 'pon.', 'uto.', 'sre.', 'Äet.', 'pet.', 'sub.'],
			date_suffix: function (date) {
				return ".";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"sv": {
			month_names: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),
			month_names_short: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
			day_names: "sÃ¶ndag_mÃ¥ndag_tisdag_onsdag_torsdag_fredag_lÃ¶rdag".split("_"),
			day_names_short: "sÃ¶n_mÃ¥n_tis_ons_tor_fre_lÃ¶r".split("_"),
			date_suffix: function (number) {
				var b = number % 10,
					output = (~~(number % 100 / 10) === 1) ? 'e' :
					(b === 1) ? 'a' :
					(b === 2) ? 'a' :
					(b === 3) ? 'e' : 'e';
				return output;
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"ta": {
			month_names: 'à®à®©à®µà®°à®¿_à®ªà®¿à®ªà¯à®°à®µà®°à®¿_à®®à®¾à®°à¯à®à¯_à®à®ªà¯à®°à®²à¯_à®®à¯_à®à¯à®©à¯_à®à¯à®²à¯_à®à®à®¸à¯à®à¯_à®à¯à®ªà¯à®à¯à®®à¯à®ªà®°à¯_à®à®à¯à®à¯à®¾à®ªà®°à¯_à®¨à®µà®®à¯à®ªà®°à¯_à®à®¿à®à®®à¯à®ªà®°à¯'.split("_"),
			month_names_short: 'à®à®©à®µà®°à®¿_à®ªà®¿à®ªà¯à®°à®µà®°à®¿_à®®à®¾à®°à¯à®à¯_à®à®ªà¯à®°à®²à¯_à®®à¯_à®à¯à®©à¯_à®à¯à®²à¯_à®à®à®¸à¯à®à¯_à®à¯à®ªà¯à®à¯à®®à¯à®ªà®°à¯_à®à®à¯à®à¯à®¾à®ªà®°à¯_à®¨à®µà®®à¯à®ªà®°à¯_à®à®¿à®à®®à¯à®ªà®°à¯'.split("_"),
			day_names: 'à®à®¾à®¯à®¿à®±à¯à®±à¯à®à¯à®à®¿à®´à®®à¯_à®¤à®¿à®à¯à®à®à¯à®à®¿à®´à®®à¯_à®à¯à®µà¯à®µà®¾à®¯à¯à®à®¿à®´à®®à¯_à®ªà¯à®¤à®©à¯à®à®¿à®´à®®à¯_à®µà®¿à®¯à®¾à®´à®à¯à®à®¿à®´à®®à¯_à®µà¯à®³à¯à®³à®¿à®à¯à®à®¿à®´à®®à¯_à®à®©à®¿à®à¯à®à®¿à®´à®®à¯'.split("_"),
			day_names_short: 'à®à®¾à®¯à®¿à®±à¯_à®¤à®¿à®à¯à®à®³à¯_à®à¯à®µà¯à®µà®¾à®¯à¯_à®ªà¯à®¤à®©à¯_à®µà®¿à®¯à®¾à®´à®©à¯_à®µà¯à®³à¯à®³à®¿_à®à®©à®¿'.split("_"),
			date_suffix: function (date) {
				return 'à®µà®¤à¯';
			},
			meridiem: function (hour, minute, isLower) {
				if (hour >= 6 && hour <= 10) {
					return " à®à®¾à®²à¯";
				} else if (hour >= 10 && hour <= 14) {
					return " à®¨à®£à¯à®ªà®à®²à¯";
				} else if (hour >= 14 && hour <= 18) {
					return " à®à®±à¯à®ªà®¾à®à¯";
				} else if (hour >= 18 && hour <= 20) {
					return " à®®à®¾à®²à¯";
				} else if (hour >= 20 && hour <= 24) {
					return " à®à®°à®µà¯";
				} else if (hour >= 0 && hour <= 6) {
					return " à®µà¯à®à®±à¯";
				}
			}
		},
		"th": {
			month_names: "à¸¡à¸à¸£à¸²à¸à¸¡_à¸à¸¸à¸¡ï¿½ à¸²à¸à¸±à¸à¸à¹_à¸¡à¸µà¸à¸²à¸à¸¡_à¹à¸¡à¸©à¸²à¸¢à¸_à¸à¸¤à¸©ï¿½ à¸²à¸à¸¡_à¸¡à¸´à¸à¸¸à¸à¸²à¸¢à¸_à¸à¸£à¸à¸à¸²à¸à¸¡_à¸ªà¸´à¸à¸«à¸²à¸à¸¡_à¸à¸±à¸à¸¢à¸²à¸¢à¸_à¸à¸¸à¸¥à¸²à¸à¸¡_à¸à¸¤à¸¨à¸à¸´à¸à¸²à¸¢à¸_à¸à¸±à¸à¸§à¸²à¸à¸¡".split("_"),
			month_names_short: "à¸¡à¸à¸£à¸²_à¸à¸¸à¸¡ï¿½ à¸²_à¸¡à¸µà¸à¸²_à¹à¸¡à¸©à¸²_à¸à¸¤à¸©ï¿½ à¸²_à¸¡à¸´à¸à¸¸à¸à¸²_à¸à¸£à¸à¸à¸²_à¸ªà¸´à¸à¸«à¸²_à¸à¸±à¸à¸¢à¸²_à¸à¸¸à¸¥à¸²_à¸à¸¤à¸¨à¸à¸´à¸à¸²_à¸à¸±à¸à¸§à¸²".split("_"),
			day_names: "à¸­à¸²à¸à¸´à¸à¸¢à¹_à¸à¸±à¸à¸à¸£à¹_à¸­à¸±à¸à¸à¸²à¸£_à¸à¸¸à¸_à¸à¸¤à¸«à¸±à¸ªà¸à¸à¸µ_à¸¨à¸¸à¸à¸£à¹_à¹à¸ªà¸²à¸£à¹".split("_"),
			day_names_short: "à¸­à¸²à¸à¸´à¸à¸¢à¹_à¸à¸±à¸à¸à¸£à¹_à¸­à¸±à¸à¸à¸²à¸£_à¸à¸¸à¸_à¸à¸¤à¸«à¸±à¸ª_à¸¨à¸¸à¸à¸£à¹_à¹à¸ªà¸²à¸£à¹".split("_"),
			meridiem: function (hour, minute, isLower) {
				if (hour < 12) {
					return "à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸";
				} else {
					return "à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸";
				}
			},
			date_suffix: function (date) {
				return "";
			}
		},
		"tl-ph": {
			month_names: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),
			month_names_short: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),
			day_names: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),
			day_names_short: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
			date_suffix: function (number) {
				return "";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"tr": {
			month_names: "Ocak_Åubat_Mart_Nisan_MayÄ±s_Haziran_Temmuz_AÄustos_EylÃ¼l_Ekim_KasÄ±m_AralÄ±k".split("_"),
			month_names_short: "Oca_Åub_Mar_Nis_May_Haz_Tem_AÄu_Eyl_Eki_Kas_Ara".split("_"),
			day_names: "Pazar_Pazartesi_SalÄ±_ÃarÅamba_PerÅembe_Cuma_Cumartesi".split("_"),
			day_names_short: "Paz_Pts_Sal_Ãar_Per_Cum_Cts".split("_"),
			date_suffix: function (number) {
				if (number === 0) { // special case for zero
					return number + "'Ä±ncÄ±";
				}
				var a = number % 10,
					b = number % 100 - a,
					c = number >= 100 ? 100 : null;

				return (suffixes[a] || suffixes[b] || suffixes[c]);
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"tzm-la": {
			month_names: "innayr_brË¤ayrË¤_marË¤sË¤_ibrir_mayyw_ywnyw_ywlywz_É£wÅ¡t_Å¡wtanbir_ktË¤wbrË¤_nwwanbir_dwjnbir".split("_"),
			month_names_short: "innayr_brË¤ayrË¤_marË¤sË¤_ibrir_mayyw_ywnyw_ywlywz_É£wÅ¡t_Å¡wtanbir_ktË¤wbrË¤_nwwanbir_dwjnbir".split("_"),
			day_names: "asamas_aynas_asinas_akras_akwas_asimwas_asiá¸yas".split("_"),
			day_names_short: "asamas_aynas_asinas_akras_akwas_asimwas_asiá¸yas".split("_"),
			date_suffix: function (date) {
				return "";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"tzm": {
			month_names: "âµâµâµâ´°âµ¢âµ_â´±âµâ´°âµ¢âµ_âµâ´°âµâµ_âµâ´±âµâµâµ_âµâ´°âµ¢âµ¢âµ_âµ¢âµâµâµ¢âµ_âµ¢âµâµâµ¢âµâµ£_âµâµâµâµ_âµâµâµâ´°âµâ´±âµâµ_â´½âµâµâ´±âµ_âµâµâµ¡â´°âµâ´±âµâµ_â´·âµâµâµâ´±âµâµ".split("_"),
			month_names_short: "âµâµâµâ´°âµ¢âµ_â´±âµâ´°âµ¢âµ_âµâ´°âµâµ_âµâ´±âµâµâµ_âµâ´°âµ¢âµ¢âµ_âµ¢âµâµâµ¢âµ_âµ¢âµâµâµ¢âµâµ£_âµâµâµâµ_âµâµâµâ´°âµâ´±âµâµ_â´½âµâµâ´±âµ_âµâµâµ¡â´°âµâ´±âµâµ_â´·âµâµâµâ´±âµâµ".split("_"),
			day_names: "â´°âµâ´°âµâ´°âµ_â´°âµ¢âµâ´°âµ_â´°âµâµâµâ´°âµ_â´°â´½âµâ´°âµ_â´°â´½âµ¡â´°âµ_â´°âµâµâµâµ¡â´°âµ_â´°âµâµâ´¹âµ¢â´°âµ".split("_"),
			day_names_short: "â´°âµâ´°âµâ´°âµ_â´°âµ¢âµâ´°âµ_â´°âµâµâµâ´°âµ_â´°â´½âµâ´°âµ_â´°â´½âµ¡â´°âµ_â´°âµâµâµâµ¡â´°âµ_â´°âµâµâ´¹âµ¢â´°âµ".split("_"),
			date_suffix: function (date) {
				return "";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"uk": {
			month_names: 'ÑÑÑÐµÐ½Ñ_Ð»ÑÑÐ¸Ð¹_Ð±ÐµÑÐµÐ·ÐµÐ½Ñ_ÐºÐ²ÑÑÐµÐ½Ñ_ÑÑÐ°Ð²ÐµÐ½Ñ_ÑÐµÑÐ²ÐµÐ½Ñ_Ð»Ð¸Ð¿ÐµÐ½Ñ_ÑÐµÑÐ¿ÐµÐ½Ñ_Ð²ÐµÑÐµÑÐµÐ½Ñ_Ð¶Ð¾Ð²ÑÐµÐ½Ñ_Ð»Ð¸ÑÑÐ¾Ð¿Ð°Ð´_Ð³ÑÑÐ´ÐµÐ½Ñ'.split('_'),
			month_names_short: "ÑÑÑ_Ð»ÑÑ_Ð±ÐµÑ_ÐºÐ²ÑÑ_ÑÑÐ°Ð²_ÑÐµÑÐ²_Ð»Ð¸Ð¿_ÑÐµÑÐ¿_Ð²ÐµÑ_Ð¶Ð¾Ð²Ñ_Ð»Ð¸ÑÑ_Ð³ÑÑÐ´".split("_"),
			day_names: 'Ð½ÐµÐ´ÑÐ»Ñ_Ð¿Ð¾Ð½ÐµÐ´ÑÐ»Ð¾Ðº_Ð²ÑÐ²ÑÐ¾ÑÐ¾Ðº_ÑÐµÑÐµÐ´Ð°_ÑÐµÑÐ²ÐµÑ_Ð¿âÑÑÐ½Ð¸ÑÑ_ÑÑÐ±Ð¾ÑÐ°'.split('_'),
			day_names_short: "Ð½Ð´_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±".split("_"),
			date_suffix: function (date) {
				return "-Ð³Ð¾";
			},
			meridiem: function (hour, minute, isLower) {
				if (hour < 4) {
					return "Ð½Ð¾ÑÑ";
				} else if (hour < 12) {
					return "ÑÐ°Ð½ÐºÑ";
				} else if (hour < 17) {
					return "Ð´Ð½Ñ";
				} else {
					return "Ð²ÐµÑÐ¾ÑÐ°";
				}
			}
		},
		"uz": {
			month_names: "ÑÐ½Ð²Ð°ÑÑ_ÑÐµÐ²ÑÐ°Ð»Ñ_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐµÐ»Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ½ÑÑÐ±ÑÑ_Ð¾ÐºÑÑÐ±ÑÑ_Ð½Ð¾ÑÐ±ÑÑ_Ð´ÐµÐºÐ°Ð±ÑÑ".split("_"),
			month_names_short: "ÑÐ½Ð²_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½_Ð¸ÑÐ»_Ð°Ð²Ð³_ÑÐµÐ½_Ð¾ÐºÑ_Ð½Ð¾Ñ_Ð´ÐµÐº".split("_"),
			day_names: "Ð¯ÐºÑÐ°Ð½Ð±Ð°_ÐÑÑÐ°Ð½Ð±Ð°_Ð¡ÐµÑÐ°Ð½Ð±Ð°_Ð§Ð¾ÑÑÐ°Ð½Ð±Ð°_ÐÐ°Ð¹ÑÐ°Ð½Ð±Ð°_ÐÑÐ¼Ð°_Ð¨Ð°Ð½Ð±Ð°".split("_"),
			day_names_short: "Ð¯ÐºÑ_ÐÑÑ_Ð¡ÐµÑ_Ð§Ð¾Ñ_ÐÐ°Ð¹_ÐÑÐ¼_Ð¨Ð°Ð½".split("_"),
			date_suffix: function (date) {
				return "";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"vi": {
			month_names: "thÃ¡ng 1_thÃ¡ng 2_thÃ¡ng 3_thÃ¡ng 4_thÃ¡ng 5_thÃ¡ng 6_thÃ¡ng 7_thÃ¡ng 8_thÃ¡ng 9_thÃ¡ng 10_thÃ¡ng 11_thÃ¡ng 12".split("_"),
			month_names_short: "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),
			day_names: "chá»§ nháº­t_thá»© hai_thá»© ba_thá»© tÆ°_thá»© nÄm_thá»© sÃ¡u_thá»© báº£y".split("_"),
			day_names_short: "CN_T2_T3_T4_T5_T6_T7".split("_"),
			date_suffix: function (date) {
				return "";
			},
			meridiem: function (hour, minute, isLower) {
				return "";
			}
		},
		"zh-cn": {
			month_names: "ä¸æ_äºæ_ä¸æ_åæ_äºæ_å­æ_ä¸æ_å«æ_ä¹æ_åæ_åä¸æ_åäºæ".split("_"),
			month_names_short: "1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ".split("_"),
			day_names: "æææ¥_ææä¸_ææäº_ææä¸_ææå_ææäº_ææå­".split("_"),
			day_names_short: "å¨æ¥_å¨ä¸_å¨äº_å¨ä¸_å¨å_å¨äº_å¨å­".split("_"),
			meridiem: function (hour, minute, isLower) {
				var hm = hour * 100 + minute;
				if (hm < 600) {
					return "åæ¨";
				} else if (hm < 900) {
					return "æ©ä¸";
				} else if (hm < 1130) {
					return "ä¸å";
				} else if (hm < 1230) {
					return "ä¸­å";
				} else if (hm < 1800) {
					return "ä¸å";
				} else {
					return "æä¸";
				}
			},
			date_suffix: function (number, period) {
				return number + "æ¥";

			}
		},
		"zh-tw": {
			month_names: "ä¸æ_äºæ_ä¸æ_åæ_äºæ_å­æ_ä¸æ_å«æ_ä¹æ_åæ_åä¸æ_åäºæ".split("_"),
			month_names_short: "1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ".split("_"),
			day_names: "æææ¥_ææä¸_ææäº_ææä¸_ææå_ææäº_ææå­".split("_"),
			day_names_short: "é±æ¥_é±ä¸_é±äº_é±ä¸_é±å_é±äº_é±å­".split("_"),
			meridiem: function (hour, minute, isLower) {
				var hm = hour * 100 + minute;
				if (hm < 900) {
					return "æ©ä¸";
				} else if (hm < 1130) {
					return "ä¸å";
				} else if (hm < 1230) {
					return "ä¸­å";
				} else if (hm < 1800) {
					return "ä¸å";
				} else {
					return "æä¸";
				}
			},
			date_suffix: function (number, period) {
				return number + "æ¥";
			}

		}
	};

	Date.holidays = {
		"FR": {
			fixed_holidays: ["01-01", "05-01", "05-08", "07-14", "08-15", "11-01", "11-11", "12-25"],
			moveable_holidays: function(year) {
				var holidays = [];
				var easter = Date.easter(year);
				holidays.push(easter.copy());
				holidays.push(easter.addDays(1).copy());
				holidays.push(easter.addDays(38).copy());
				holidays.push(easter.addDays(10).copy());
				holidays.push(easter.addDays(1).copy());
				return holidays;
			}
		},
		"US": {
			fixed_holidays: [],
			moveable_holidays: function(year) {
				return [];
			}
		},
	};

	Date.prototype.format = function (formatString) {

		var addPadding = function (value, length) {
			var negative = ((value < 0) ? "-" : "");
			var zeros = "0";
			for (var i = 2; i < length; i++) {
				zeros += "0";
			}
			return negative + (zeros + Math.abs(value).toString()).slice(-length);
		};

		var replacements = {
			date: this,
			d: function () {
				return addPadding(this.date.getDate(), 2);
			},
			D: function () {
				return this.date.getDayNameShort();
			},
			j: function () {
				return this.date.getDate();
			},
			l: function () {
				return this.date.getDayName();
			},
			N: function () {
				return this.date.getDay() + 1;
			},
			S: function () {
				return this.date.getDateSuffix();
			},
			w: function () {
				return this.date.getDay();
			},
			z: function () {
				return this.date.getDayOfYear();
			},
			W: function () {
				return this.date.getWeekNumber();
			},
			F: function () {
				return this.date.getMonthName();
			},
			m: function () {
				return addPadding((this.date.getMonth() + 1), 2);
			},
			M: function () {
				return this.date.getMonthNameShort();
			},
			n: function () {
				return this.date.getMonth() + 1;
			},
			t: function () {
				return this.date.getDaysInMonth();
			},
			L: function () {
				return this.date.isLeapYear() ? 1 : 0;
			},
			o: function () {
				return this.date.getFullYear();
			},
			Y: function () {
				return this.date.getFullYear();
			},
			y: function () {
				return this.date.getFullYear() % 100;
			},
			a: function () {
				return this.date.getMeridiem(true);
			},
			A: function () {
				return this.date.getMeridiem(false);
			},
			H: function () {
				return addPadding(this.date.getHours(), 2);
			},
			G: function () {
				return this.date.getHours();
			},
			h: function () {
				var hour = this.date.getHours();
				if (hour > 12) {
					hour -= 12;
				} else if (hour < 1) {
					hour = 12;
				}
				return addPadding(hour, 2);
			},
			g: function () {
				var hour = this.date.getHours();
				if (hour > 12) {
					hour -= 12;
				} else if (hour < 1) {
					hour = 12;
				}
				return hour;
			},
			i: function () {
				return addPadding(this.date.getMinutes(), 2);
			},
			s: function () {
				return addPadding(this.date.getSeconds(), 2);
			},
			u: function () {
				return Math.floor(this.date.getMilliseconds() * 1000);
			},
			Z: function () {
				return this.date.getTimezoneOffset() * 60;
			},
			P: function () {
				return Math.floor(-this.date.getTimezoneOffset() / 60) + ":" + addPadding(-this.date.getTimezoneOffset() % 60, 2);
			}
		};


		var formats = new Array();
		while (formatString.length > 0) {
			if (formatString[0] === "\"") {
				var temp = /"[^"]*"/m.exec(formatString);
				if (temp === null) {
					formats.push(formatString.substring(1));
					formatString = "";
				} else {
					temp = temp[0].substring(1, temp[0].length - 1);
					formats.push(temp);
					formatString = formatString.substring(temp.length + 2);
				}
			} else if (formatString[0] === "'") {
				var temp = /'[^']*'/m.exec(formatString);
				if (temp === null) {
					formats.push(formatString.substring(1));
					formatString = "";
				} else {
					temp = temp[0].substring(1, temp[0].length - 1);
					formats.push(temp);
					formatString = formatString.substring(temp.length + 2);
				}
			} else if (formatString[0] === "\\") {
				if (formatString.length > 1) {
					formats.push(formatString.substring(1, 2));
					formatString = formatString.substring(2);
				} else {
					formats.push("\\");
					formatString = "";
				}
			} else {
				var foundMatch = false;
				for (var i = formatString.length; i > 0; i--) {
					if (formatString.substring(0, i) in replacements) {
						formats.push(replacements[formatString.substring(0, i)]());
						formatString = formatString.substring(i);
						foundMatch = true;
						break;
					}
				}
				if (!foundMatch) {
					formats.push(formatString[0]);
					formatString = formatString.substring(1);
				}
			}
		}

		return formats.join("");
	};

	Date.createFromFormat = function (format, value) {
		var now = new Date();
		var parsed = {
			date: now.getDate(),
			year: now.getFullYear(),
			month: now.getMonth(),
			hours: 0,
			minutes:  0,
			seconds:  0,
			milliseconds: 0
		};
		try { 
			for(var i = 0; i < format.length; i++) {
				var f = format.charAt(i);
				switch (f) {
					case 'd':
						parsed.date = parseInt(value.substring(0, 2), 10);
						value = value.substring(2);
						break;
					case 'j':
						var next = parseInt(value.charAt(1), 10);
						var len = (next >= 0 && next <= 9 ) ? 2 : 1;
						parsed.date = parseInt(value.substring(0, len), 10);
						value = value.substring(len);
						break;
					case 'F':
						var months = Date.locales[this.getLocale()].month_names;
						var len = months[0].length;
						var month = value.substring(0, len);
						value = value.substring(len);
						for (var m = 0; m < 12; m++) {
							if (months[m] == month) {
								parsed.month = m;
								break;
							}
						}
						break;
					case 'M':
						var months = Date.locales[this.getLocale()].month_names_short;
						var len = months[0].length;
						var month = value.substring(0, len);
						value = value.substring(len);
						for (var m = 0; m < 12; m++) {
							if (months[m] == month) {
								parsed.month = m;
								break;
							}
						}
						break;
					case 'm':
						parsed.month = parseInt(value.substring(0, 2), 10) - 1;
						value = value.substring(2);
						break;
					case 'n':
						var next = parseInt(value.charAt(1), 10);
						var len = (next >= 0 && next <= 9 ) ? 2 : 1;
						parsed.month = parseInt(value.substring(0, len), 10) - 1;
						if (parsed.month > 11) {
							throw new Error('Invalid month');
						}
						value = value.substring(len);
						break;
					case 'o':
					case 'Y':
						parsed.year = parseInt(value.substring(0, 4), 10);
						value = value.substring(4);
						break;
					case 'y':
						var year = parseInt(value.substring(0, 2), 10);
						parsed.year = (year > 50 ) ? year + 1900 : year + 2000;
						value = value.substring(2);
						break;
					case 'H':
						parsed.hours = parseInt(value.substring(0, 2), 10);
						value = value.substring(2);
						break;
					case 'G':
						var next = parseInt(value.charAt(1), 10);
						var len = (next >= 0 && next <= 9 ) ? 2 : 1;
						parsed.hours = parseInt(value.substring(0, len), 10);
						value = value.substring(len);
						break;
					case 'i':
						parsed.minutes = parseInt(value.substring(0, 2), 10);
						value = value.substring(2);
						break;
					case 's':
						parsed.seconds = parseInt(value.substring(0, 2), 10);
						value = value.substring(2);
						break;
					case 'u':
						var len = 0;
						for (var i = 0; i < value.length; i++) {
							if (value.charAt(i) < '0' || value.charAt(i) > '9') {
								break;
							}
							len++;
						}
						parsed.milliseconds = parseInt(value.substring(0, len), 10) / 1000;
						value = value.substring(len);
					   break;
					default:
						value = value.substring(1);
				}
			}
			if (parsed.year > 9999) {
				throw 'Invalid year';
			}
			if (parsed.month > 11) {
				throw 'Invalid month';
			}
			if (!(parsed.year % 4) && (parsed.year % 100) || !(parsed.year % 400)) { // leap year
				if (parsed.date < 1 || (parsed.month == 1 && parsed.date > 29)) {
					throw 'Invalid day';
				}
			} else {
				if (parsed.date < 1 || (parsed.month == 1 && parsed.date > 28)) {
					throw 'Invalid day';
				}
			}
			if (parsed.hours > 23) {
				throw 'Invalid hours';
			}
			if (parsed.minutes > 59) {
				throw 'Invalid minutes';
			}
			if (parsed.seconds > 59) {
				throw 'Invalid seconds';
			}
			return new Date(parsed.year, parsed.month, parsed.date, parsed.hours, parsed.minutes, parsed.seconds, parsed.milliseconds);
		} catch(err) {
			throw "Date parsing error : " + err;
		}
	};

})();

(function (global) {
	'use strict';

	function Token(type, value) {
		this.type  = type;
		this.arity = 0;
		this.value = value;
	};

	Token.TYPE = {
		T_UNDEFINED			: 0,
		T_NUMBER	  		: 1,  
		T_DATE				: 2, 
		T_BOOLEAN			: 3, 
		T_TEXT				: 4, 
		T_ANY				: 5, 
		T_IDENT				: 6,  
		T_FUNCTION			: 7,  
		T_ARRAY				: 8,  
		T_POPEN				: 9,  
		T_PCLOSE			: 10, 
		T_SBOPEN			: 11,  
		T_SBCLOSE			: 12, 
		T_COMMA				: 13, 
		T_NOOP				: 14, 
		T_PLUS				: 15, 
		T_MINUS				: 16, 
		T_TIMES				: 17, 
		T_DIV				: 18, 
		T_MOD				: 19, 
		T_POW				: 20, 
		T_UNARY_PLUS		: 21, 
		T_UNARY_MINUS		: 22, 
		T_NOT				: 23, 
		T_FIELD				: 24, 
		T_EQUAL				: 25,
		T_NOT_EQUAL			: 26,
		T_LESS_THAN			: 27,
		T_LESS_OR_EQUAL		: 28,
		T_GREATER_THAN		: 29,
		T_GREATER_OR_EQUAL	: 30,
		T_CONTAINS			: 31,
		T_NOT_CONTAINS		: 32,
		T_BITWISE_AND		: 33,
		T_BITWISE_OR		: 34,
		T_BITWISE_XOR		: 35,
		T_LOGICAL_AND		: 36,
		T_LOGICAL_OR		: 37,
		T_TERNARY			: 38,
		T_TERNARY_ELSE		: 39,
		T_DEGRE				: 40,

		A_NONE				: 0,
		A_LEFT				: 1,
		A_RIGHT				: 2
	};

	Token.prototype = {
		isUnaryOperator: function (){
			switch (this.type) {
				case Token.TYPE.T_NOT:
				case Token.TYPE.T_UNARY_PLUS:
				case Token.TYPE.T_UNARY_MINUS:
				case Token.TYPE.T_TERNARY_ELSE:
				case Token.TYPE.T_DEGRE:
					return true;
			}
			return false;
		},

		isBinaryOperator: function (){
			switch (this.type) {
				case Token.TYPE.T_POW:
				case Token.TYPE.T_TIMES:
				case Token.TYPE.T_DIV:
				case Token.TYPE.T_MOD:
				case Token.TYPE.T_PLUS:
				case Token.TYPE.T_MINUS:
				case Token.TYPE.T_BITWISE_AND:
				case Token.TYPE.T_BITWISE_OR:
				case Token.TYPE.T_BITWISE_XOR:
				case Token.TYPE.T_LOGICAL_AND:
				case Token.TYPE.T_LOGICAL_OR:
					return true;
			}
			return false;
		},

		isTernaryOperator: function (){
			switch (this.type) {
				case Token.TYPE.T_TERNARY:
					return true;
			}
			return false;
		},

		isOperator: function (){
			return this.isUnaryOperator() 
				|| this.isBinaryOperator() 
				|| this.isTernaryOperator();
		},

		isComparator: function (){
			switch (this.type) {
				case Token.TYPE.T_EQUAL:
				case Token.TYPE.T_NOT_EQUAL:
				case Token.TYPE.T_LESS_THAN:
				case Token.TYPE.T_LESS_OR_EQUAL:
				case Token.TYPE.T_GREATER_THAN:
				case Token.TYPE.T_GREATER_OR_EQUAL:
				case Token.TYPE.T_CONTAINS:
				case Token.TYPE.T_NOT_CONTAINS:
					return true;
			}
			return false;
		},

		isVariable: function(){
			switch (this.type) {
				case Token.TYPE.T_IDENT:
				case Token.TYPE.T_FIELD:
				case Token.TYPE.T_UNDEFINED:
					return true;
			}
			return false;
		},

		isUndefined: function(){
			return this.type == Token.TYPE.T_UNDEFINED;
		},

		isBeforeFunctionArgument: function (){
			switch (this.type) {
				case Token.TYPE.T_POPEN:
				case Token.TYPE.T_COMMA:
				case Token.TYPE.T_NOOP:
					return true;
			}
			return false;
		},

		precedence: function (){
			switch (this.type) {
				case Token.TYPE.T_POPEN:
				case Token.TYPE.T_PCLOSE:
				case Token.TYPE.T_POW:
					return 1;
				case Token.TYPE.T_NOT:
				case Token.TYPE.T_UNARY_PLUS:
				case Token.TYPE.T_UNARY_MINUS:
				case Token.TYPE.T_DEGRE:
					return 2;
				case Token.TYPE.T_TIMES:
				case Token.TYPE.T_DIV:
				case Token.TYPE.T_MOD:
					return 3;
				case Token.TYPE.T_PLUS:
				case Token.TYPE.T_MINUS:
					return 4;
				case Token.TYPE.T_LESS_THAN:
				case Token.TYPE.T_LESS_OR_EQUAL:
				case Token.TYPE.T_GREATER_THAN:
				case Token.TYPE.T_GREATER_OR_EQUAL:
					return 6;
				case Token.TYPE.T_EQUAL:
				case Token.TYPE.T_NOT_EQUAL:
				case Token.TYPE.T_CONTAINS:
				case Token.TYPE.T_NOT_CONTAINS:
					return 7;
				case Token.TYPE.T_BITWISE_AND:
					return 8;
				case Token.TYPE.T_BITWISE_XOR:
					return 9;
				case Token.TYPE.T_BITWISE_OR:
					return 10;
				case Token.TYPE.T_LOGICAL_AND:
					return 11;
				case Token.TYPE.T_LOGICAL_OR:
					return 12;
				case Token.TYPE.T_TERNARY_ELSE:
					return 13;
				case Token.TYPE.T_TERNARY:
					return 14;
				case Token.TYPE.T_COMMA:
					return 15;
			}
			return 16;
		},

		associativity: function (){
			switch (this.type) {
				case Token.TYPE.T_POW:
				case Token.TYPE.T_NOT:
				case Token.TYPE.T_UNARY_PLUS:
				case Token.TYPE.T_UNARY_MINUS:
					return Token.TYPE.A_RIGHT;
				case Token.TYPE.T_DEGRE:
				case Token.TYPE.T_TIMES:
				case Token.TYPE.T_DIV:
				case Token.TYPE.T_MOD:
				case Token.TYPE.T_PLUS:
				case Token.TYPE.T_MINUS:
				case Token.TYPE.T_LESS_THAN:
				case Token.TYPE.T_LESS_OR_EQUAL:
				case Token.TYPE.T_GREATER_THAN:
				case Token.TYPE.T_GREATER_OR_EQUAL:
				case Token.TYPE.T_EQUAL:
				case Token.TYPE.T_NOT_EQUAL:
				case Token.TYPE.T_CONTAINS:
				case Token.TYPE.T_NOT_CONTAINS:
				case Token.TYPE.T_BITWISE_AND:
				case Token.TYPE.T_BITWISE_XOR:
				case Token.TYPE.T_BITWISE_OR:
				case Token.TYPE.T_LOGICAL_AND:
				case Token.TYPE.T_LOGICAL_OR:
				case Token.TYPE.T_TERNARY:
					return Token.TYPE.A_LEFT;
				case Token.TYPE.T_TERNARY_ELSE:
					return Token.TYPE.A_RIGHT;
				case Token.TYPE.T_COMMA:
					return Token.TYPE.A_LEFT;
			}
			return Token.TYPE.A_NONE;
		},

		toString: function () {
			switch (this.type) {
				case Token.TYPE.T_DATE:
					return this.value.format("d/m/Y");
					break;
				case Token.TYPE.T_BOOLEAN:
					return this.value ? 'true' : 'false';
					break;
				case Token.TYPE.T_FUNCTION:
					return this.value;
					break;
				case Token.TYPE.T_ARRAY:
					return JSON.stringify(this.value);
					break;
				default:
					return this.value.toString();
			}
		}
	};

	global.Token = Token;

}(this));

(function (global) {
	'use strict';

	function Expression(expression) {
		this.expression = expression;
		this.tokens = [];
		this.postfixed = false;
	};

	Expression.prototype = {
		get: function (){
			return this.tokens;
		},

		push: function (t){
			this.tokens.push(t);
		},

		pop: function (){
			return this.tokens.pop();
		},

		peek: function (){
			return this.tokens[this.tokens.length - 1];
		},

		postfix : function () {
			var stack = [];
			var rpn = [];

			$.each(this.tokens, function( t, token ) {
				switch (token.type) {
					case Token.TYPE.T_COMMA:
						while (stack.length != 0 && stack[stack.length-1].type != Token.TYPE.T_POPEN) {
							rpn.push(stack.pop());
						}
						if (stack.length > 1
							&& stack[stack.length-2].type == Token.TYPE.T_FUNCTION) {
							stack[stack.length-2].arity++;
						}
						break;
					case Token.TYPE.T_NUMBER:
					case Token.TYPE.T_DATE:
					case Token.TYPE.T_BOOLEAN:
					case Token.TYPE.T_TEXT:
					case Token.TYPE.T_ANY:
					case Token.TYPE.T_IDENT:
					case Token.TYPE.T_FIELD:
					case Token.TYPE.T_ARRAY:
					case Token.TYPE.T_UNDEFINED:
						rpn.push(token);
						break;
					case Token.TYPE.T_PCLOSE:
						while (stack.length != 0 && stack[stack.length-1].type != Token.TYPE.T_POPEN) {
							rpn.push(stack.pop());
						}
						if (stack.length == 0) {
							throw new Error("Closing parenthesis without opening parenthesis");
						}
						stack.pop();
						if (stack.length != 0
							&& stack[stack.length-1].type == Token.TYPE.T_FUNCTION) {
							stack[stack.length-1].arity++;
							rpn.push(stack.pop());
						}
						break;
					case Token.TYPE.T_POPEN:
					case Token.TYPE.T_FUNCTION:
						stack.push(token);
						break;
					default:
						if (token.isOperator() || token.isComparator()) {
							while (stack.length != 0
								&& (stack[stack.length-1].isOperator() || stack[stack.length-1].isComparator())
								&& ((token.associativity() == Token.TYPE.A_LEFT && token.precedence() >= stack[stack.length-1].precedence()) || (token.associativity() == Token.TYPE.A_RIGHT && token.precedence() > stack[stack.length-1].precedence()))) {
								rpn.push(stack.pop());
							}
							stack.push(token);
						} else {
							throw new Error("Unrecognized token " + token.value);
						}
						break;
				}
			});
			while (stack.length != 0 && stack[stack.length-1].type != Token.TYPE.T_POPEN) {
				rpn.push(stack.pop());
			}
			if (stack.length != 0) {
				throw new Error("Opening parenthesis without closing parenthesis");
			}
			this.tokens = rpn;
			this.postfixed = true;
		},

		setFields: function (fields) {
			$.each(this.tokens, function( t, token ) {
				if (token.type == Token.TYPE.T_FIELD && fields.length >= token.value) {
					var value = fields[token.value - 1];
					if ($.isArray(value)) {
						token.type = Token.TYPE.T_ARRAY;
						token.value = value;
					} else if ($.isNumeric(value)) {
						token.type = Token.TYPE.T_NUMBER;
						token.value = parseFloat(value);
					} else if (value.match(/^\d{1,2}\/\d{1,2}\/\d{4}/)) {
						token.type = Token.TYPE.T_DATE;
						token.value = Date.createFromFormat("j/n/Y", value);
					} else if (value === 'true' || value === 'false') {
						token.type = Token.TYPE.T_BOOLEAN;
						token.value = value === 'true';
					} else {
						token.type = Token.TYPE.T_TEXT;
						token.value = value;
					}
				}
			});
		},

		setNamedFields: function (fields) {
			$.each(this.tokens, function( t, token ) {
				if (token.type == Token.TYPE.T_IDENT && typeof fields[token.value] !== 'undefined' && fields[token.value] !== null) {
					var value = fields[token.value];
					if ($.isArray(value)) {
						token.type = Token.TYPE.T_ARRAY;
						token.value = value;
					} else if ($.isNumeric(value)) {
						token.type = Token.TYPE.T_NUMBER;
						token.value = parseFloat(value);
					} else if (value.match(/^\d{1,2}\/\d{1,2}\/\d{4}/)) {
						token.type = Token.TYPE.T_DATE;
						token.value = Date.createFromFormat("j/n/Y", value);
					} else if (value === 'true' || value === 'false') {
						token.type = Token.TYPE.T_BOOLEAN;
						token.value = value === 'true';
					} else {
						token.type = Token.TYPE.T_TEXT;
						token.value = value;
					}
				}
			});
		},

		setVariables: function (variables) {
			var completed = true;
			$.each(this.tokens, function( t, token ) {
				if (token.type == Token.TYPE.T_FIELD) {
					var value = variables['' + token.value];
					if (typeof value === 'undefined' || value === null || value.length == 0) {
						completed = false;
					} else if ($.isArray(value)) {
						token.type = Token.TYPE.T_ARRAY;
						token.value = value;
					} else if ($.isNumeric(value)) {
						token.type = Token.TYPE.T_NUMBER;
						token.value = parseFloat(value);
					} else if (/^\d{1,2}\/\d{1,2}\/\d{4}/.test(value)) {
						token.type = Token.TYPE.T_DATE;
						token.value = Date.createFromFormat("j/n/Y", value);
					} else if (value === 'true' || value === 'false') {
						token.type = Token.TYPE.T_BOOLEAN;
						token.value = value === 'true';
					} else {
						token.type = Token.TYPE.T_TEXT;
						token.value = value;
					}
				} else if (token.type == Token.TYPE.T_IDENT) {
					var value = variables[token.value];
					if (typeof value === 'undefined' || value === null || value.length == 0) {
						completed = false;
					} else if ($.isArray(value)) {
						token.type = Token.TYPE.T_ARRAY;
						token.value = value;
					} else if ($.isNumeric(value)) {
						token.type = Token.TYPE.T_NUMBER;
						token.value = parseFloat(value);
					} else if (/^\d{1,2}\/\d{1,2}\/\d{4}/.test(value)) {
						token.type = Token.TYPE.T_DATE;
						token.value = Date.createFromFormat("j/n/Y", value);
					} else if (value === 'true' || value === 'false') {
						token.type = Token.TYPE.T_BOOLEAN;
						token.value = value === 'true';
					} else {
						token.type = Token.TYPE.T_TEXT;
						token.value = value;
					}
				}
			});
			return completed;
		},

		evaluate: function () {
			try {
				var ops = [];
				var self = this;
				$.each(this.tokens, function( t, token ) {
					if (token.isOperator()) {
						ops.push(self.operation(token, ops));
					} else if (token.isComparator()) {
						ops.push(self.comparison(token, ops));
					} else {
						switch (token.type) {
							case Token.TYPE.T_NUMBER:
							case Token.TYPE.T_DATE:
							case Token.TYPE.T_BOOLEAN:
							case Token.TYPE.T_TEXT:
							case Token.TYPE.T_ANY:
							case Token.TYPE.T_IDENT:
							case Token.TYPE.T_FIELD:
							case Token.TYPE.T_ARRAY:
							case Token.TYPE.T_UNDEFINED:
								ops.push(token);
								break;
							case Token.TYPE.T_FUNCTION:
								ops.push(self.func(token, ops));
								break;
							default:
								throw new Error("Unrecognized token " + token.value);
						}
					}
				});
				var result = ops[ops.length-1];
				return result.isVariable() ? false : '' + result;
			} catch (e) {
				return false;
			}
		},

		operation: function (op, args) {
			if (op.isUnaryOperator()) {
				if (args.length < 1) {
					throw new Error("Illegal number (" + args.length + ") of operands for " + op);
				}
				var arg1 = args.pop();
			} else if (op.isBinaryOperator()) {
				if (args.length < 2) {
					throw new Error("Illegal number (" + args.length + ") of operands for " + op);
				}
				var arg2 = args.pop();
				var arg1 = args.pop();
			} else if (op.isTernaryOperator()) {
				if (args.length < 3) {
					throw new Error("Illegal number (" + args.length + ") of operands for " + op);
				}
				var arg3 = args.pop();
				var arg2 = args.pop();
				var arg1 = args.pop();
			}
			var result = new Token(Token.TYPE.T_NUMBER, 0);
			switch (op.type) {
				case Token.TYPE.T_PLUS:
					if (arg1.isVariable() || arg2.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1, arg2];
					} else if (arg1.type == Token.TYPE.T_NUMBER) { 
						if (arg2.type == Token.TYPE.T_NUMBER) {
							result.value = arg1.value + arg2.value;
						} else if (arg2.type == Token.TYPE.T_DATE) {
							var date = arg2.value;
							date.addDays(arg1.value);
							result.type = Token.TYPE.T_DATE;
							result.value = date;
						} else if (arg2.type == Token.TYPE.T_TEXT) {
							result.type = Token.TYPE.T_TEXT;
							result.value = arg1.value.toString() + arg2.value;
						} else {
							throw  new Error("Illegal argument '" + arg2 + "' for " + op);
						}
					} else if (arg1.type == Token.TYPE.T_DATE) {
						if (arg2.type == Token.TYPE.T_NUMBER) {
							var date = arg1.value;
							date.addDays(arg2.value);
							result.type = Token.TYPE.T_DATE;
							result.value = date;
						} else if (arg2.type == Token.TYPE.T_TEXT) {
							result.type = Token.TYPE.T_TEXT;
							result.value = arg1.value.format("d/m/Y") + arg2.value;
						} else {
							throw new Error("Illegal argument '" + arg2 + "' for " + op);
						}
					} else if (arg1.type == Token.TYPE.T_TEXT) {
						result.type = Token.TYPE.T_TEXT;
						if (arg2.type == Token.TYPE.T_NUMBER) {
							result.value = arg1.value + arg2.value.toString();
						} else if (arg2.type == Token.TYPE.T_DATE) {
							result.value = arg1.value + arg2.value.format("d/m/Y");
						} else if (arg2.type == Token.TYPE.T_TEXT) {
							result.value = arg1.value + arg2.value;
						} else {
							throw new Error("Illegal argument '" + arg2 + "' for " + op);
						}
					} else {
						throw new Error("Illegal argument '" + arg1 + "' for " + op);
					}
					break;
				case Token.TYPE.T_MINUS:
					if (arg1.isVariable() || arg2.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1, arg2];
					} else if (arg1.type == Token.TYPE.T_NUMBER) { 
						if (arg2.type == Token.TYPE.T_NUMBER) {
							result.value = arg1.value - arg2.value;
						} else {
							throw new Error("Illegal argument '" + arg2 + "' for " + op);
						}
					} else if (arg1.type == Token.TYPE.T_DATE) {
						if (arg2.type == Token.TYPE.T_NUMBER) {
							var date = arg1.value;
							date.addDays(-arg2.value);
							result.type = Token.TYPE.T_DATE;
							result.value = date;
						} else if (arg2.type == Token.TYPE.T_DATE) {
							result.value = (arg1.value > arg2.value)
								? arg2.value.getDaysBetween(arg1.value)
								: 0;
						} else {
							throw new Error("Illegal argument '" + arg2 + "' for " + op);
						}
					} else {
						throw new Error("Illegal argument '" + arg1 + "' for " + op);
					}
					break;
				case Token.TYPE.T_TIMES:
					if (arg1.isVariable() || arg2.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1, arg2];
					} else if (arg1.type != Token.TYPE.T_NUMBER || arg2.type != Token.TYPE.T_NUMBER) { 
						throw new Error("Illegal argument '" + arg2 + "' : operands must be numbers for " + op);
					} else {
						result.value = arg1.value * arg2.value;
					}
					break;
				case Token.TYPE.T_DIV:
					if (arg1.isVariable() || arg2.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1, arg2];
					} else if (arg1.type != Token.TYPE.T_NUMBER || arg2.type != Token.TYPE.T_NUMBER) { 
						throw new Error("Illegal argument : operands must be numbers for " + op);
					} else {
						result.value = arg1.value / arg2.value;
					}
					break;
				case Token.TYPE.T_MOD:
					if (arg1.isVariable() || arg2.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1, arg2];
					} else if (arg1.type != Token.TYPE.T_NUMBER || arg2.type != Token.TYPE.T_NUMBER) { 
						throw new Error("Illegal argument : operands must be numbers for " + op);
					} else {
						result.value = arg1.value % arg2.value;
					}
					break;
				case Token.TYPE.T_POW:
					if (arg1.isVariable() || arg2.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1, arg2];
					} else if (arg1.type != Token.TYPE.T_NUMBER || arg2.type != Token.TYPE.T_NUMBER) { 
						throw new Error("Illegal argument : operands must be numbers for " + op);
					} else {
						result.value = Math.pow(arg1.value, arg2.value);
					}
					break;
				case Token.TYPE.T_BITWISE_AND:
					if (arg1.isVariable() || arg2.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1, arg2];
					} else if (arg1.type != Token.TYPE.T_NUMBER || arg2.type != Token.TYPE.T_NUMBER) { 
						throw new Error("Illegal argument : operands must be numbers for " + op);
					} else {
						result.value = arg1.value & arg2.value;
					}
					break;
				case Token.TYPE.T_BITWISE_XOR:
					if (arg1.isVariable() || arg2.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1, arg2];
					} else if (arg1.type != Token.TYPE.T_NUMBER || arg2.type != Token.TYPE.T_NUMBER) { 
						throw new Error("Illegal argument : operands must be numbers for " + op);
					} else {
						result.value = arg1.value ^ arg2.value;
					}
					break;
				case Token.TYPE.T_BITWISE_OR:
					if (arg1.isVariable() || arg2.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1, arg2];
					} else if (arg1.type != Token.TYPE.T_NUMBER || arg2.type != Token.TYPE.T_NUMBER) { 
						throw new Error("Illegal argument : operands must be numbers for " + op);
					} else {
						result.value = arg1.value | arg2.value;
					}
					break;
				case Token.TYPE.T_LOGICAL_AND:
					result.type = Token.TYPE.T_BOOLEAN;
					if (arg1.type == Token.TYPE.T_BOOLEAN && arg2.type == Token.TYPE.T_BOOLEAN) {
						result.value = arg1.value && arg2.value;
					} else if (arg1.type == Token.TYPE.T_BOOLEAN) {
						if (! arg1.value) {
							result.value = false;
						} else if (arg2.isVariable()) {
							result.type = Token.TYPE.T_UNDEFINED;
							result.value = [arg1, arg2];
						} else {
							throw new Error("Illegal argument 2 : operand must be boolean for "+ op);
						}
					} else if (arg2.type == Token.TYPE.T_BOOLEAN) {
						if (! arg2.value) {
							result.value = false;
						} else if (arg1.isVariable()) {
							result.type = Token.TYPE.T_UNDEFINED;
							result.value = [arg1, arg2];
						} else {
							throw new Error("Illegal argument 1 : operand must be boolean for " + op);
						}
					} else if (arg1.isVariable() || arg2.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1, arg2];
					} else {
						throw new Error("Illegal argument : operands must be boolean for " + op);
					}
					break;
				case Token.TYPE.T_LOGICAL_OR:
					result.type = Token.TYPE.T_BOOLEAN;
					if (arg1.type == Token.TYPE.T_BOOLEAN && arg2.type == Token.TYPE.T_BOOLEAN) {
						result.value = arg1.value || arg2.value;
					} else if (arg1.type == Token.TYPE.T_BOOLEAN) {
						if (arg1.value) {
							result.value = true;
						} else if (arg2.isVariable()) {
							result.type = Token.TYPE.T_UNDEFINED;
							result.value = [arg1, arg2];
						} else {
							throw new Error("Illegal argument 2 : operand must be boolean for " + op);
						}
					} else if (arg2.type == Token.TYPE.T_BOOLEAN) {
						if (arg2.value) {
							result.value = true;
						} else if (arg1.isVariable()) {
							result.type = Token.TYPE.T_UNDEFINED;
							result.value = [arg1, arg2];
						} else {
							throw new Error("Illegal argument 1 : operand must be boolean for " + op);
						}
					} else if (arg1.isVariable() || arg2.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1, arg2];
					} else {
						throw new Error("Illegal argument : operands must be boolean for " + op);
					}
					break;
				case Token.TYPE.T_UNARY_PLUS:
					if (arg1.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1];
					} else if (arg1.type != Token.TYPE.T_NUMBER) { 
						throw new Error("Illegal argument '" + arg1 + "' : operand must be a number for " + op);
					} else {
						result.value = arg1.value;
					}
					break;
				case Token.TYPE.T_UNARY_MINUS:
					if (arg1.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1];
					} else if (arg1.type != Token.TYPE.T_NUMBER) { 
						throw new Error("Illegal argument '" + arg1 + "' : operand must be a number for " + op);
					} else {
						result.value = -arg1.value;
					}
					break;
				case Token.TYPE.T_NOT:
					if (arg1.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1];
					} else if (arg1.type != Token.TYPE.T_NUMBER && arg1.type != Token.TYPE.T_BOOLEAN) { 
						throw new Error("Illegal argument '" + arg1 + "' : operand must be a number or a boolean for " + op);
					} else {
						result.type = arg1.type;
						result.value = !arg1.value;
					}
					break;
				case Token.TYPE.T_DEGRE:
					if (arg1.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1];
					} else if (arg1.type != Token.TYPE.T_NUMBER) { 
						throw new Error("Illegal argument '" + arg1 + "' : operand must be a number for " + op);
					} else {
						result.value = arg1.value * Math.PI / 180;
					}
					break;
				case Token.TYPE.T_TERNARY_ELSE:
					result = arg1;
					break;
				case Token.TYPE.T_TERNARY:
					if (arg1.isVariable()) {
						result.type = Token.TYPE.T_UNDEFINED;
						result.value = [arg1, arg2, arg3];
					} else if (arg1.type != Token.TYPE.T_BOOLEAN) { 
						throw new Error("Illegal argument '" + arg1 + "' : operand 1 must be a condition for " + op);
					} else {
						result = arg1.value ? arg2 : arg3;
					}
					break;
			}
			this.guessType(result);
			return result;
		},

		comparison: function (op, args) {
			if (args.length < 2) {
				throw new Error("Illegal number (" + args.length + ") of operands for " + op);
			}
			var arg2 = args.pop();
			var arg1 = args.pop();
			var result;
			if (arg1.isVariable() || arg2.isVariable()) {
				result = new Token(Token.TYPE.T_UNDEFINED, [arg1, arg2]);
			} else if (op.type != Token.TYPE.T_CONTAINS && arg1.type != arg2.type) { 
				throw new Error("operand types for '" + op + "' are not identical");
			} else if (op.type == Token.TYPE.T_CONTAINS && arg1.type != Token.TYPE.T_ARRAY) { 
				throw new Error("first operand type for '" + op + "' is not an array");
			} else {
				result = new Token(Token.TYPE.T_BOOLEAN, false);
				switch (op.type) {
					case Token.TYPE.T_EQUAL:
						result.value = (arg1.value == arg2.value);
						break;
					case Token.TYPE.T_NOT_EQUAL:
						result.value = (arg1.value != arg2.value);
						break;
					case Token.TYPE.T_LESS_THAN:
						result.value = (arg1.value < arg2.value);
						break;
					case Token.TYPE.T_LESS_OR_EQUAL:
						result.value = (arg1.value <= arg2.value);
						break;
					case Token.TYPE.T_GREATER_THAN:
						result.value = (arg1.value > arg2.value);
						break;
					case Token.TYPE.T_GREATER_OR_EQUAL:
						result.value = (arg1.value >= arg2.value);
						break;
					case Token.TYPE.T_CONTAINS:
						result.value = $.isArray(arg1.value) && $.inArray(arg2.value.toString(), arg1.value) >= 0;
						break;
					case Token.TYPE.T_NOT_CONTAINS:
						result.value = ! $.isArray(arg1.value) || $.inArray(arg2.value.toString(), arg1.value) < 0;
						break;
				}
			}
			return result;
		},

		guessType : function (token) {
			if (token.type == Token.TYPE.T_TEXT) {
				if ($.isNumeric(token.value)) {
					token.type = Token.TYPE.T_NUMBER;
					token.value = parseFloat(token.value);
				} else if (/^\d{1,2}\/\d{1,2}\/\d{4}/.test(token.value)) {
					token.type = Token.TYPE.T_DATE;
					token.value = Date.createFromFormat("j/n/Y", token.value);
				} else if (token.value === 'true' || token.value === 'false') {
					token.type = Token.TYPE.T_BOOLEAN;
					token.value = token.value === 'true';
				}
			}
		},

		func: function (func, args) {
			var functions = {
				"abs": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.abs(a); }],
				"acos": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.acos(a); }],
				"acosh": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.acosh(a); }],
				"addMonths": [2, [Token.TYPE.T_NUMBER, Token.TYPE.T_DATE], Token.TYPE.T_DATE, function(a, b) { return b.addMonths(a); }],
				"asin": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.asin(a); }],
				"asinh": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.asinh(a); }],
				"atan": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.atan(a); }],
				"atan2": [2, [Token.TYPE.T_NUMBER, Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a, b) { return Math.atan2(a, b); }],
				"atanh": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.atanh(a); }],
				"ceil": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.ceil(a); }],
				"concat": [-1, [Token.TYPE.T_TEXT], Token.TYPE.T_TEXT, function(a) {
					var c = '';
					$.each(a, function(i, v) {
						c += v !== undefined ? v : '';
					});
					return c; 
				}],
				"cos": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.cos(a); }],
				"cosh": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.cosh(a); }],
				"count": [-1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) {
					var c = 0;
					$.each(a, function(i, v) {
						if (v !== undefined) {
							c += 1;
						}
					});
					return c; 
				}],
				"day": [1, [Token.TYPE.T_DATE], Token.TYPE.T_NUMBER, function(a) { return a.getDate(); }],
				"exp": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.exp(a); }],
				"firstDayOfMonth": [1, [Token.TYPE.T_DATE], Token.TYPE.T_DATE, function(a) { return a.firstDayOfMonth(); }],
				"floor": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.floor(a); }],
				"fullmonth": [1, [Token.TYPE.T_DATE], Token.TYPE.T_TEXT, function(a) { return a.getMonthName('fr') + ' ' + a.format('Y'); }],
				"get": [2, [Token.TYPE.T_ARRAY, Token.TYPE.T_NUMBER], Token.TYPE.T_TEXT, function(a, b) { return b < a.lengh + 1 ? a[b - 1] : ''; }],
				"lastday": [2, [Token.TYPE.T_NUMBER, Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a, b) { var d = Date.createFromFormat('Y-n-j', a + '-' + b + '-1' );return d.lastday(false); }],
				"lastDayOfMonth": [1, [Token.TYPE.T_DATE], Token.TYPE.T_DATE, function(a) { return a.lastDayOfMonth(); }],
				"lcfirst": [1, [Token.TYPE.T_TEXT], Token.TYPE.T_TEXT, function(a) { return a.replace(/(^[A-Z])/,function (p) { return p.toLowerCase(); } ); }],
				"length": [1, [Token.TYPE.T_TEXT], Token.TYPE.T_NUMBER, function(a) { return a.length; }],
				"log": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.log(a); }],
				"log10": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.log10(a); }],
				"lower": [1, [Token.TYPE.T_TEXT], Token.TYPE.T_TEXT, function(a) { return a.toLowerCase(); }],
				"match": [2, [Token.TYPE.T_TEXT, Token.TYPE.T_TEXT], Token.TYPE.T_BOOLEAN, function(a, b) { return b.match(a) != null; }],
				"max": [-1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.max.apply(null, a); }],
				"min": [-1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.min.apply(null, a); }],
				"money": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_TEXT, function(a) { return accounting.formatNumber(a, 2, "Â ", ",").toString(); }],
				"month": [1, [Token.TYPE.T_DATE], Token.TYPE.T_NUMBER, function(a) { return a.getMonth() + 1; }],
				"nextWorkDay": [1, [Token.TYPE.T_DATE], Token.TYPE.T_DATE, function(a) { return a.nextWorkingDay(); }],
				"pow": [2, [Token.TYPE.T_NUMBER, Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a, b) { return Math.pow(a, b); }],
				"rand": [0, [], Token.TYPE.T_NUMBER, function() { return Math.random(); }],
				"replace": [3, [Token.TYPE.T_TEXT, Token.TYPE.T_TEXT, Token.TYPE.T_TEXT], Token.TYPE.T_TEXT, function(a, b, c) { return c.replace(a, b); }],
				"round": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.round(a); }],
				"sin": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.sin(a); }],
				"sinh": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.sinh(a); }],
				"size": [1, [Token.TYPE.T_ARRAY], Token.TYPE.T_NUMBER, function(a) { return a.length; }],
				"split": [2, [Token.TYPE.T_TEXT, Token.TYPE.T_TEXT], Token.TYPE.T_ARRAY, function(a, b) { return b.split(a); }],
				"sqrt": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.sqrt(a); }],
				"substr": [3, [Token.TYPE.T_TEXT, Token.TYPE.T_NUMBER, Token.TYPE.T_NUMBER], Token.TYPE.T_TEXT, function(a, b, c) { return a.substr(b, c); }],
				"sum": [-1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) {
					var s = 0;
					$.each(a, function(i, v) {
						if (v !== undefined) {
							s += v;
						}
					});
					return s; 
				}],
				"tan": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.tan(a); }],
				"tanh": [1, [Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a) { return Math.tanh(a); }],
				"trim": [1, [Token.TYPE.T_TEXT], Token.TYPE.T_TEXT, function(a) { return $.trim(a); }],
				"ucfirst": [1, [Token.TYPE.T_TEXT], Token.TYPE.T_TEXT, function(a) { return a.replace(/(^[a-z])/,function (p) { return p.toUpperCase(); } ); }],
				"upper": [1, [Token.TYPE.T_TEXT], Token.TYPE.T_TEXT, function(a) { return a.toUpperCase(); }],
				"workdays": [2, [Token.TYPE.T_DATE, Token.TYPE.T_DATE], Token.TYPE.T_NUMBER, function(a, b) { return a.workingDaysBefore(b); }],
				"workdaysofmonth": [2, [Token.TYPE.T_NUMBER, Token.TYPE.T_NUMBER], Token.TYPE.T_NUMBER, function(a, b) {
					var d1 = Date.createFromFormat('Y-n-j', a + '-' + b + '-1' );
					var d2 = new Date(d1.getFullYear(), d1.getMonth() + 1, 0);
					return d1.workingDaysBefore(d2); 
				}],
				"year": [1, [Token.TYPE.T_DATE], Token.TYPE.T_NUMBER, function(a) { return a.getFullYear(); }]
			};
			if (func.value === "defined") {
				if (args.length < 1) { 
					throw new Error("Illegal number (" + args.length + ") of operands for function" + func);
				}
				var arg = args.pop();
				if (arg.isVariable()) {
					return new Token(Token.TYPE.T_BOOLEAN, false);
				}
				if (typeof arg.value === "undefined" || arg.value === null || arg.value === "") {
					return new Token(Token.TYPE.T_BOOLEAN, false);
				}
				return new Token(Token.TYPE.T_BOOLEAN, true);
			}
			if (typeof functions[func.value] === "undefined" || functions[func.value] === null) {
				throw new Error("Unknown function : " + func);
			}
			var argc = functions[func.value][0];
			var variableArgsCount = false;
			if (argc == -1) {
				argc = func.arity;
				variableArgsCount = true;
			}
			if (args.length < argc) {
				throw new Error("Illegal number (" + args.length + ") of operands for function" + func);
			}
			var argv = [];
			for (; argc > 0; --argc) {
				var arg = args.pop();
				if (! variableArgsCount) {
					if (arg.isVariable()) {
						return new Token(Token.TYPE.T_UNDEFINED, [arg]);
					}
					var type = functions[func.value][1][argc - 1];
					if (arg.type != type) { 
						var expected = "";
						switch (type) {
							case Token.TYPE.T_NUMBER:
								expected = "number";
								break;
							case Token.TYPE.T_DATE: 
								expected = "date";
								break;
							case Token.TYPE.T_BOOLEAN:
								expected = "boolean";
								break;
							case Token.TYPE.T_TEXT: 
								expected = "text";
								break;
							case Token.TYPE.T_ARRAY: 
								expected = "array";
								break;
						}
						throw new Error("Illegal type for argument '" + arg + "' : operand must be a " + expected + " for " + func);
					}
				} else if (arg.isVariable()) {
					return new Token(Token.TYPE.T_UNDEFINED, [arg]);
				}
				argv.unshift(arg.value); 
			}
			if (variableArgsCount) {
				argv = [argv];
			}
			return new Token(functions[func.value][2], functions[func.value][3].apply(this, argv));
		}
	};

	global.Expression = Expression;

}(this));

(function (global) {
	'use strict';

	var PATTERN = /([\s!,\+\-\*\/\^%\(\)\[\]=<\>\~\&\^\|\?\:Â°])/g;

    var lookup = {
        '+': Token.TYPE.T_PLUS,
        '-': Token.TYPE.T_MINUS,
        '/': Token.TYPE.T_DIV,
        '%': Token.TYPE.T_MOD,
        '(': Token.TYPE.T_POPEN,
        ')': Token.TYPE.T_PCLOSE,
        '[': Token.TYPE.T_SBOPEN,
        ']': Token.TYPE.T_SBCLOSE,
        '*': Token.TYPE.T_TIMES,
        '!': Token.TYPE.T_NOT,
        ',': Token.TYPE.T_COMMA,
        '=': Token.TYPE.T_EQUAL,
        '<': Token.TYPE.T_LESS_THAN,
        '>': Token.TYPE.T_GREATER_THAN,
        '~': Token.TYPE.T_CONTAINS,
        '&': Token.TYPE.T_BITWISE_AND,
        '^': Token.TYPE.T_BITWISE_XOR,
        '|': Token.TYPE.T_BITWISE_OR,
        '?': Token.TYPE.T_TERNARY,
        ':': Token.TYPE.T_TERNARY_ELSE,
        'Â°': Token.TYPE.T_DEGRE
    };

	function ExpressionParser() {
		this.text = [];
	};

	ExpressionParser.prototype = {
		parse: function (infix) {
			var constants = {
				'pi'	: new Token(Token.TYPE.T_NUMBER, Math.PI),
				'now'	: new Token(Token.TYPE.T_DATE, new Date()),
				'today'	: new Token(Token.TYPE.T_DATE, new Date()),
				'true'	: new Token(Token.TYPE.T_BOOLEAN, true),
				'false'	: new Token(Token.TYPE.T_BOOLEAN, false)
			};
			var expr = new Expression(infix);
			var self = this;
			infix = infix.replace(/('[^']*')/g, function (match, m1, str) {
				self.text.push(m1.substr(1, m1.length - 2));
				return "Â¤" + self.text.length;
			});
			infix = infix.replace(/("[^"]*")/g, function (match, m1, str) {
				self.text.push(m1.substr(1, m1.length - 2));
				return "Â¤" + self.text.length;
			});
			infix = infix.replace(/(\d{1,2})\/(\d{1,2})\/(\d{4})/g, "D$1.$2.$3");
			var toks = infix.split(PATTERN);
			var prev = new Token(Token.TYPE.T_NOOP, 'noop');
			$.each(toks, function( t, value ) {
				value = value.replace(/^\s+|\s+$/g, '');
				var matches;
				if ($.isNumeric(value)) {
					if (prev.type == Token.TYPE.T_PCLOSE)
						expr.push(new Token(Token.TYPE.T_TIMES, '*'));
					expr.push(prev = new Token(Token.TYPE.T_NUMBER, parseFloat(value)));
				} else if (value.match(/^#\d+/)) {
					if (prev.type == Token.TYPE.T_PCLOSE)
						expr.push(new Token(Token.TYPE.T_TIMES, '*'));
					expr.push(prev = new Token(Token.TYPE.T_FIELD, parseInt(value.substr(1), 10)));
				} else if (matches = value.match(/^Â¤(\d+)/)) {
					if (prev.type == Token.TYPE.T_PCLOSE)
						expr.push(new Token(Token.TYPE.T_TIMES, '*'));
					var i = parseInt(matches[1], 10);
					expr.push(prev = new Token(Token.TYPE.T_TEXT, self.text[i - 1]));
				} else if (matches = value.match(/^D(\d{1,2})\.(\d{1,2})\.(\d{4})/)) {
					if (prev.type == Token.TYPE.T_PCLOSE)
						expr.push(new Token(Token.TYPE.T_TIMES, '*'));
					var date = Date.createFromFormat("j/n/Y", matches[1] + "/" + matches[2] + "/" + matches[3]);
					expr.push(prev = new Token(Token.TYPE.T_DATE, date));
				} else if (constants[value]) {
					if (prev.type == Token.TYPE.T_PCLOSE)
						expr.push(new Token(Token.TYPE.T_TIMES, '*'));
					expr.push(prev = constants[value]);
				} else if (value !== "") {
					var type;
					switch (type = lookup[value] ? lookup[value] : Token.TYPE.T_IDENT) {
						case Token.TYPE.T_EQUAL:
							switch (prev.type) {
								case Token.TYPE.T_NOT:
									expr.pop();
									type = Token.TYPE.T_NOT_EQUAL;
									value = "!=";
									break;
								case Token.TYPE.T_LESS_THAN:
									expr.pop();
									type = Token.TYPE.T_LESS_OR_EQUAL;
									value = "<=";
									break;
								case Token.TYPE.T_GREATER_THAN:
									expr.pop();
									type = Token.TYPE.T_GREATER_OR_EQUAL;
									value = ">=";
									break;
							}
							break;
						case Token.TYPE.T_CONTAINS:
							if (prev.type == Token.TYPE.T_NOT) {
								expr.pop();
								type = Token.TYPE.T_NOT_CONTAINS;
								value = "!~";
								break;
							}
						case Token.TYPE.T_BITWISE_AND:
							if (prev.type == Token.TYPE.T_BITWISE_AND) {
								expr.pop();
								type = Token.TYPE.T_LOGICAL_AND;
								value = "&&";
							}
							break;
						case Token.TYPE.T_BITWISE_OR:
							if (prev.type == Token.TYPE.T_BITWISE_OR) {
								expr.pop();
								type = Token.TYPE.T_LOGICAL_OR;
								value = "||";
							}
							break;
						case Token.TYPE.T_TIMES:
							if (prev.type == Token.TYPE.T_TIMES) {
								expr.pop();
								type = Token.TYPE.T_POW;
								value = "**";
							}
							break;
						case Token.TYPE.T_PLUS:
							if (prev.isOperator() || prev.isComparator() || prev.isBeforeFunctionArgument())
								type = Token.TYPE.T_UNARY_PLUS;
							break;

						case Token.TYPE.T_MINUS:
							if (prev.isOperator() || prev.isComparator() || prev.isBeforeFunctionArgument())
								type = Token.TYPE.T_UNARY_MINUS;
							break;

						case Token.TYPE.T_POPEN:
							switch (prev.type) {
								case Token.TYPE.T_IDENT:
									prev.type = Token.TYPE.T_FUNCTION;
									break;

								case Token.TYPE.T_NUMBER:
								case Token.TYPE.T_DATE:
								case Token.TYPE.T_BOOLEAN:
								case Token.TYPE.T_TEXT:
								case Token.TYPE.T_ARRAY:
								case Token.TYPE.T_PCLOSE:
									expr.push(new Token(Token.TYPE.T_TIMES, '*'));
									break;
							}
							break;

						case Token.TYPE.T_SBOPEN:
							t = expr.pop();
							expr.push(new Token(Token.TYPE.T_FUNCTION, 'get'));
							expr.push(new Token(Token.TYPE.T_POPEN, '('));
							expr.push(t);
							type = Token.TYPE.T_COMMA;
							value = ',';
							break;

						case Token.TYPE.T_SBCLOSE:
							type = Token.TYPE.T_PCLOSE;
							value = '(';
							break;

					}
					expr.push(prev = new Token(type, value));
				}
			});
			return expr;
		}
	};

	global.ExpressionParser = ExpressionParser;
}(this));

(function (global) {
	'use strict';

	function RuleEngine(rules) {
		this.rulesData = rules.rulesData || [];
		this.actionsAdapter = rules.actionsAdapter;
	}

	RuleEngine.prototype = { 
		runAll: function(conditionsAdapter, cb) {
			var self = this;
			$.each(self.rulesData, function(r, rule) {
				self.run(r, conditionsAdapter, cb);
			});
		},

		run: function(ruleIndex, conditionsAdapter, cb) {
			var self = this;
			var rule = self.rulesData[ruleIndex];
			self.ifActions = rule.ifActions || [];
			self.elseActions = rule.elseActions || [];
			self.conditions = rule.conditions || {all: []};
			var out, error;
			self.matches(conditionsAdapter, function(err, result) {
				out = result;
				error = err;
				if (!err) {
					if (result) {
						self.runIfActions(self.actionsAdapter);
					} else {
						self.runElseActions(self.actionsAdapter);
					}
				}
				if (cb) {
					cb(err, result);
				}
			});
			if (!cb) {
				if (error) {
					throw error;
				}
				return out;
			}
		},

		matches: function(conditionsAdapter, cb) {
			var parser = new ExpressionParser();
			var expr = parser.parse(this.conditions);
			expr.postfix();
			expr.setVariables(conditionsAdapter);
			var result = expr.evaluate();
			if (result === false) {
				var e = "Syntax error";
				if (cb) {
					cb(e, result);
				}
			} else {
				if (cb) {
					cb(null, result === 'true');
				} else {
					return result === 'true';
				}
			}
		},

		runIfActions: function(actionsAdapter) {
			for (var i=0; i < this.ifActions.length; i++) {
				var actionData = this.ifActions[i];
				var actionName = actionData.value;
				var actionFunction = actionsAdapter[actionName]
				if (actionFunction) { 
					actionFunction(new Finder(actionData)); 
				}
			}
		},

		runElseActions: function(actionsAdapter) {
			for (var i=0; i < this.elseActions.length; i++) {
				var actionData = this.elseActions[i];
				var actionName = actionData.value;
				var actionFunction = actionsAdapter[actionName]
				if (actionFunction) { 
					actionFunction(new Finder(actionData)); 
				}
			}
		},

	 
	};

	function Finder(data) {
		this.data = data;
	}

	Finder.prototype = {
		find: function() {
		  var currentNode = this.data;
		  for (var i=0; i < arguments.length; i++) {
			var name = arguments[i];
			currentNode = findByName(name, currentNode);
			if (!currentNode) { 
				return null; 
			}
		  }
		  return currentNode.value;
		}
	};

	function findByName(name, node) {
		var fields = node.fields || [];
		for (var i=0; i < fields.length; i++) {
			var field = fields[i];
			if (field.name === name) {
				return field;
			}
		}
		return null;
	}

	global.RuleEngine = RuleEngine;
}(this));

(function (global) {
	'use strict';

	function G6k(isDynamic, isMobile, locale) {
		this.isDynamic = isDynamic;
		this.isMobile = isMobile;
		this.locale = Date.locale = locale;
		this.parser = new ExpressionParser();
		this.rulesengine = null;
		this.simu = null;
		this.currentProfil = null;
		this.variables = {};
		this.sourcesCaches = {};
		this.urisCaches = {};
		this.lastUserInputName = "";
		this.hasFatalError = false;
		this.hasGlobalError = false;
		this.hasError = false;
		this.basePath = window.location.pathname.replace(/\/[^\/]+$/, "");
	};

	G6k.prototype = {
		run: function () {
			var self = this;
			this.variables['script'] = 1;
			$("div.help-panel dl dt").append('<a title="Fermer" href="javascript:">X</a>');
			$("div.help-panel dl dt a").click(function() {
				$(this).parents(".help-panel").collapse('hide');
			});
			$("input[type='reset'], button[type='reset']").click(function() {
				$('#g6k_form').clearForm();
				$("input.resettable").val("");
				if (self.isDynamic) {
					self.variables = {};
					$.each(self.simu.datas, function( name, data ) {
						self.getData(name).modifiedByUser = false;
						$("#" + name + ".output").text("");
						self.resetDataValue(data);
						self.removeError(name);
						self.removeWarning(name);
						if (typeof data.unparsedContent !== "undefined" && data.unparsedContent !== "") {
							var content = self.evaluate(data.unparsedContent);
							if (content !== false) {
								if (content && data.type === "multichoice" && ! $.isArray(content)) {
									if (/\[\]$/.test(content)) {
										content = JSON.parse(content);
									} else {
										content = [content];
									}
								}
								self.variables[name] = data.value = content;
							}
						}
						self.reevaluateFields(name);
					});
					self.removeGlobalError();
					if ( $("div.foot-notes").children("div.foot-note").filter(":visible").length) {
						$("div.foot-notes").show();
					} else {
						$("div.foot-notes").hide();
					}
				}
			});
			var collapseAllButton = $(".step-page .collapse-expand-all-tools button:first-child"),
				expandAllButton = $(".step-page .collapse-expand-all-tools button:last-child");
			collapseAllButton.bind("click", function(e) {
				var scope = $(this).parents('.step-panel-container');
				scope.find(".chapter-label > h3 > button.btn-collapse[aria-expanded=true]").trigger("click");
				e.stopPropagation();
				return false;
			});
			expandAllButton.bind("click", function(e) {
				var scope = $(this).parents('.step-panel-container');
				scope.find(".chapter-label > h3 > button.btn-collapse[aria-expanded=false]").trigger("click");
				e.stopPropagation();
				return false;
			});
			$( ".disposition-classic select, .disposition-grid select").each(function(k) {
				if (! this.hasAttribute('data-widget')) {
					$(this).listbox();
				}
			});
			if (this.isDynamic) {
				var view = $('input[name=view]').eq(0).val();
				var step = $('input[name=step]').eq(0).val();
				var token = $('input[name=_csrf_token]').eq(0).val();
				var path = $(location).attr('pathname').replace("/"+view, "").replace(/\/+$/, "") + "/Default/fields";
				var self = this;
				$.post(path,
					{stepId: step, _csrf_token: token },
					function(simu){
						self.simu = simu;
						self.processFields();
					},
					"json"
				).fail(function(jqXHR, textStatus, errorThrown) {
					if ((jqXHR.status != 0 && jqXHR.status != 200) || textStatus === 'timeout') {
						self.setFatalError( Translator.trans("Data to continue this simulation are not accessible. Please try again later.") );
					}
				});
			}
		},

		setProfile: function(profile) {
			var self = this;
			var id = profile.attr('data-profile-id');
			if (self.currentProfil == null || self.currentProfil.attr('data-profile-id') != id) {
				if (self.currentProfil != null) {
					self.currentProfil.removeClass('active');
				}
				self.currentProfil = profile;
				profile.addClass('active');
				$.each(self.simu.profiles.profiles, function(p, profile) {
					if (profile.id == id) {
						$.each(profile.datas, function(d, data) {
							self.setValue(data.name, data.default);
						});
					}
				});
			}
		},

		normalizeName: function(name) {
			if (/\[\]$/.test(name)) {
				name = name.substr(0, name.length - 2);
			}
			return name;
		},

		getData: function(name) {
			name = this.normalizeName(name);
			var data = this.simu.datas[name];
			return data;
		},

		getDataNameById: function(id) {
			var dataName = null;
			$.each(this.simu.datas, function(name, data) {
				if (data.id == id) {
					dataName = name;
					return false;
				}
			});
			return dataName;
		},

		isVisible: function (name) {
			var input = $("input[name='"+ name +"']");
			if (input.hasClass('listbox-input')) {
				input = input.parent();
			}
			return input.is(':visible');
		},

		check: function(data) {
			if (!data || !data.value || data.value.length == 0) {
				return true;
			}
			switch (data.type) {
				case 'date':
					if (! /^\d{1,2}\/\d{1,2}\/\d{4}$/.test(data.value)) {
						return false;
					}
					try {
						var d = Date.createFromFormat('j/n/Y', data.value);
					} catch (e) {
						return false;
					}
					break;
				case 'money':
					if (! /^-{0,1}\d+(\.\d{1,2})?$/.test(data.value)) {
						return false;
					}
					break;
				case 'integer':
					if (! /^\d+$/.test(data.value)) {
						return false;
					}
					break;
				case 'number':
				case 'percent':
					if (! /^-{0,1}\d*\.{0,1}\d+$/.test(data.value)) {
						return false;
					}
					break;
			}
			return true;
		},

		validate: function(name) {
			var ok = true;
			name = this.normalizeName(name);
			var data = this.getData(name);
			if (data.inputField) {
				var field = this.simu.step.panels[data.inputField[0]].fields[data.inputField[1]];
				if (field.usage === 'input') {
					this.removeError(name);
					this.removeWarning(name);
					if (!this.check(data)) {
						ok = false;
						switch (data.type) {
							case 'date':
								this.setError(name, Translator.trans("This value is not in the expected format (%format%)",  { "format": "jj/mm/aaaa" }, 'messages'));
								break;
							case 'number': 
								this.setError(name, Translator.trans("This value is not in the expected format (%format%)",  { "format": "chiffres seulement" }, 'messages'));
								break;
							case 'integer': 
								this.setError(name, Translator.trans("This value is not in the expected format (%format%)",  { "format": "chiffres seulement" }, 'messages'));
								break;
							case 'money': 
								this.setError(name, Translator.trans("This value is not in the expected format (%format%)",  { "format": "montant" }, 'messages'));
								break;
							case 'percent':
								this.setError(name, Translator.trans("This value is not in the expected format (%format%)",  { "format": "pourcentage" }, 'messages'));
								break;
							default:
								this.setError(name, Translator.trans("This value is not in the expected format"));
						}
					} else if (field.required && (!data.value || data.value.length == 0)) {
						this.setError(name, Translator.trans("The '%field%' field is required",  { "field": field.label }, 'messages'));
					} else if (field.visibleRequired && this.isVisible(name) && (!data.value || data.value.length == 0)) {
						this.setError(name, Translator.trans("The '%field%' field is required",  { "field": field.label }, 'messages'));
					}
				}
			}
			return ok;
		},

		setGlobalWarning: function(warning) {
			if (!$("#global-error").hasClass('has-error')) {
				$("#global-error").removeClass('hidden').addClass('has-warning').html(warning);
				$("#global-error").show();
			}
		},

		removeGlobalWarning: function() {
			if (!$("#global-error").hasClass('has-error')) {
				$("#global-error").addClass('hidden').removeClass('has-warning').text("");
				$("#global-error").hide();
			}
		},

		setGroupWarning: function(name, warning) {
			var errorContainer = $("#"+name+"-error");
			if (! errorContainer.hasClass('has-error')) {
				errorContainer.removeClass('hidden').addClass('has-warning').html(warning);
				errorContainer.show();
			}
		},

		removeGroupWarning: function(name) {
			var errorContainer = $("#"+name+"-error");
			if (! errorContainer.hasClass('has-error')) {
				errorContainer.addClass('hidden').removeClass('has-warning').text("");
				errorContainer.hide();
			}
		},

		setWarning: function(name, warning) {
			var self = this;
			var fieldContainer = $("#"+name+"-container");
			var visible = fieldContainer.is(':visible');
			$("input[name=" + name + "], input[type=checkbox], select[name=" + name + "]").each(function (index) {
				if ($(this).is(':checkbox')) {
					var n = self.normalizeName($(this).attr('name'));
					if (n != name) return true;
				}
				if (visible && !$(this).hasClass('has-error')) {
					$(this).addClass('has-warning');
					$(this).parent('.input-group').removeClass('hidden').addClass('has-warning');
					$(this).focus();
				}
			});
			if (this.getData(name).datagroup) {
				this.setGroupWarning(this.getData(name).datagroup, warning);
			} else if (visible) {
				fieldContainer.find("div.field-error").last().removeClass('hidden').addClass('has-warning').html(warning);
				fieldContainer.show();
				fieldContainer.parent().show();
				this.hasWarning = true;
			}
		},

		removeWarning: function(name) {
			var self = this;
			if (this.getData(name).datagroup) {
				this.removeGroupWarning(this.getData(name).datagroup);
			} else {
				var fieldContainer = $("#"+name+"-container");
				fieldContainer.find("div.field-error").last().addClass('hidden').removeClass('has-warning').text("");
			}
			$("input[name=" + name + "], input[type=checkbox], select[name=" + name + "]").each(function (index) {
				if ($(this).is(':checkbox')) {
					var n = self.normalizeName($(this).attr('name'));
					if (n != name) return true;
				}
				$(this).removeClass('has-warning');
				$(this).parent('.input-group').removeClass('has-warning');
			});
		},

		setFatalError: function(error) {
			this.hasFatalError = true;
			this.hasGlobalError = true;
			this.hasError = true;
			$("#global-error").addClass("fatal-error");
			$("#g6k_form input, #g6k_form select, #g6k_form textarea" ).prop( "disabled", true );
			$("#global-error").removeClass('hidden').addClass('has-error').html(error);
			$("#global-error").show();
		},

		setGlobalError: function(error) {
			this.hasGlobalError = true;
			this.hasError = true;
			$("#global-error").removeClass('hidden').addClass('has-error').html(error);
			$("#global-error").show();
		},

		removeGlobalError: function() {
			$("#g6k_form input, #g6k_form select, #g6k_form textarea" ).prop( "disabled", false );
			$("#global-error").addClass('hidden').removeClass('has-error').text("");
			$("#global-error").hide();
			this.hasGlobalError = false;
		},

		setGroupError: function(name, error) {
			this.hasError = true;
			var errorContainer = $("#"+name+"-error");
			errorContainer.removeClass('hidden').addClass('has-error').html(error);
			errorContainer.show();
		},

		removeGroupError: function(name) {
			var errorContainer = $("#"+name+"-error");
			errorContainer.addClass('hidden').removeClass('has-error').text("");
			errorContainer.hide();
		},

		setError: function(name, error) {
			var self = this;
			var fieldContainer = $("#"+name+"-container");
			var visible = fieldContainer.is(':visible');
			$("input[name=" + name + "], input[type=checkbox], select[name=" + name + "]").each(function (index) {
				if ($(this).is(':checkbox')) {
					var n = self.normalizeName($(this).attr('name'));
					if (n != name) return true;
				}
				if (visible) {
					$(this).addClass('has-error');
					$(this).parent('.input-group').removeClass('hidden').addClass('has-error');
					$(this).attr('aria-invalid', true);
					$(this).focus();
				}
			});
			if (this.getData(name).datagroup) {
				this.setGroupError(this.getData(name).datagroup, error);
			} else if (visible) {
				fieldContainer.find("div.field-error").last().removeClass('hidden').addClass('has-error').html(error);
				fieldContainer.show();
				fieldContainer.parent().show();
				this.hasError = true;
			}
		},

		removeError: function(name) {
			var self = this;
			if (this.getData(name).datagroup) {
				this.removeGroupError(this.getData(name).datagroup);
			} else {
				var fieldContainer = $("#"+name+"-container");
				fieldContainer.find("div.field-error").last().addClass('hidden').removeClass('has-error').text("");
			}
			$("input[name=" + name + "], input[type=checkbox], select[name=" + name + "]").each(function (index) {
				if ($(this).is(':checkbox')) {
					var n = self.normalizeName($(this).attr('name'));
					if (n != name) return true;
				}
				$(this).removeClass('has-error');
				$(this).parent('.input-group').removeClass('has-error');
				$(this).attr('aria-invalid', false);
			});
		},

		setFormValue: function(name, value) {
			var self = this;
			var data = this.getData(name);
			if (value && (data.type === "money" || data.type === "percent")) {
				value = value.toFixed(2).replace(/\./g, ',');
			}
			if (data.type === "multichoice") {
				$("input[type=checkbox]").each(function (index) {
					var n = self.normalizeName($(this).attr('name'));
					if (n == name) {
						if ($.inArray($(this).val(), value)) {
							if (! $(this).is(':checked')) $(this).prop('checked', true);
						} else {
							if ($(this).is(':checked')) $(this).prop('checked', false);
						}
					}
				});
				return;
			}
			$("input[name=" + name + "], select[name=" + name + "], span[id=" + name + "]").each(function (index) {
				if ($(this).is('span')) {
					$(this).text(self.formatValue(data));
				} else if ($(this).is('select')) {
					if ($(this).val() != value) $(this).val(value);
				} else if ($(this).is(':radio')) {
					$(this).val([value]);
					$(this).parent('label').parent('fieldset').find('label.choice').removeClass('checked');
					if ( $(this).is(':checked') ) {
						$(this).parent('label').addClass('checked');
					}
				} else if ($(this).is(':checkbox')) {
					if ($(this).val() != value) $(this).val(value);
				} else if ($(this).hasClass('listbox-input')) {
					if ($(this).val() != value) {
						$(this).val(value);
						$(this).listbox('update');
					}
				} else {
					if ($(this).val() != value) $(this).val(value);
				}
			});
		},

		resetDataValue: function (data) {
			if (data.type === "multichoice") {
				data.value = [];
			} else {
				data.value = "";
			}
		},

		unsetValue: function(name, value) { // only for type = 'multichoice'
			var data = this.getData(name);
			if (value && data && data.type === "multichoice" && ! $.isArray(value)) {
				var ovalues = data.value ? data.value : [];
				var pos = $.inArray(value, ovalues);
				if (pos >= 0) {
					ovalues.splice( pos, 1 );
					this.variables[name] = data.value = ovalues;
					this.validate(name);
					if (this.simu.memo && this.simu.memo == "1" && data.memorize && data.memorize == "1") {
						if (! $.cookie(name) || $.cookie(name) != value) {
							$.cookie(name, value, { expires: 365, path: this.basePath });
						}
					}
					this.lastUserInputName = "";
					this.reevaluateFields(name);
				}
			}
		},

		setValue: function(name, value) {
			var data = this.getData(name);
			if (($.isArray(value) || $.isPlainObject(value)) && data.type != "array" && data.type != "multichoice") {
				var avalue = value;
				value = "";
				$.each(avalue, function(key, val) {
					value = val;
					return false;
				});
			}
			if (value && (data.type === "money" || data.type === "percent")) {
				value = value.toString().replace(/,/g, '.');
				value = Math.round(parseFloat(value) * 100)/100;
			}
			// console && console.log("setValue : " + name + " => " + value);
			if (value && data.type === "multichoice" && ! $.isArray(value)) {
				if (/\[\]$/.test(value)) {
					value = JSON.parse(value);
				} else {
					var ovalues = data.value ? data.value : [];
					ovalues.push(value);
					value = ovalues;
				}
			}
			this.variables[name] = data.value = value;
			this.validate(name);
			if (name !== this.lastUserInputName || data.type === "integer" || data.type === "number" || data.type === "date") {
				this.setFormValue(name, value);
			}
			if (this.simu.memo && this.simu.memo == "1" && data.memorize && data.memorize == "1") {
				if (! $.cookie(name) || $.cookie(name) != value) {
					$.cookie(name, value, { expires: 365, path: this.basePath });
				}
			}
			this.lastUserInputName = "";
			this.reevaluateFields(name);
		},

		evaluate: function (expression) {
			var expr = this.parser.parse(expression);
			expr.postfix();
			expr.setVariables(this.variables);
			return expr.evaluate();
		},

		evaluateDefaults: function() {
			var self = this;
			$.each(self.simu.datas, function( name, data ) {
				if (typeof data.unparsedDefault !== "undefined" && data.unparsedDefault !== "") {
					var value = self.evaluate(data.unparsedDefault);
					if (value !== false) {
						data.deflt = value;
					}
				}
			});
		},

		reevaluateFields: function (name) {
			var self = this;
			var data = this.getData(name);
			if (typeof data.unparsedExplanation !== "undefined" && data.unparsedExplanation !== "") {
				var explanation = this.evaluate(data.unparsedExplanation);
				if (explanation === false) {
					$("#" + name + "-explanation").text("");
				} else {
					$("#" + name + "-explanation").html(explanation);
				}
			}
			if (data.dataDependencies) {
				$.each(data.dataDependencies, function( d, dependency ) {
					var field = self.getData(dependency);
					if ((! field.modifiedByUser || field.value === '') && typeof field.unparsedContent !== "undefined" && field.unparsedContent !== "") {
						var content = self.evaluate(field.unparsedContent);
						if (content !== false) {
							if (content && field.type === "multichoice" && ! $.isArray(content)) {
								if (/\[\]$/.test(content)) {
									content = JSON.parse(content);
								} else {
									content = [content];
								}
							}
							if (field.value !== content) {
								self.setValue(dependency, content);
							}
						}
					}
				});
			}
			if (data.noteDependencies) {
				$.each(data.noteDependencies, function( d, dependency ) {
					var datad = self.getData(dependency);
					if (datad.inputField) {
						var field = self.simu.step.panels[datad.inputField[0]].fields[datad.inputField[1]];
						if (field.prenote) {
							var prenote = self.replaceVariables(field.prenote);
							if (prenote !== false) {
								$('#' + dependency + '-container .pre-note').html(prenote);
							}
						}
						if (field.postnote) {
							var postnote = self.replaceVariables(field.postnote);
							if (postnote !== false) {
								$('#' + dependency + '-container .post-note').html(postnote);
							}
						}
					}
				});
			}
			if (data.sectionContentDependencies) {
				$.each(data.sectionContentDependencies, function( d, dependency ) {
					var sectionId = dependency;
					var chapterId = dependency.replace(/-section-.*$/, '');
					var blockinfoId = dependency.replace(/-chapter-.*$/, '');
					var content = self.simu.step.panels[blockinfoId].chapters[chapterId].sections[sectionId].content;
					content = self.replaceVariablesOrBlank(content);
					$('#' + sectionId + '-content').html(content);
				});
			}
			if (data.footNoteDependencies) {
				$.each(data.footNoteDependencies, function( d, dependency ) {
					var footnote = self.simu.step.footnotes[dependency];
					var id = "#foot-note-" + dependency;
					var footnotetext = self.replaceVariables(footnote.text);
					if (footnotetext !== false) {
						$(id).html(footnotetext);
					}
				});
				if ( $("div.foot-notes").children("div.foot-note").has(":visible")) {
					$("div.foot-notes").show();
				} else {
					$("div.foot-notes").hide();
				}
			}
			if (data.sourceDependencies) {
				$.each(data.sourceDependencies, function( d, dependency ) {
					var completed = true;
					var params = self.simu.sources[dependency]['parameters'];
					$.each(params, function( p, param ) {
						if (param.origin === 'data' && param.optional == '0') {
							var d = self.getData(param.data);
							if (typeof d.value === "undefined" || d.value === "") {
								completed = false;
								return false;
							}
						}
					});
					if (completed) {
						var type = self.simu.sources[dependency]['datasource']['type'];
						var returnType = self.simu.sources[dependency]['returnType'];
						if (type === 'uri' && (returnType === 'json' || returnType === 'csv' || (document.evaluate && (returnType === 'xml'|| returnType === 'html')))) {
							self.getUriSource(dependency);
						} else {
							self.getInternalSource(dependency);
						}
					} else {
						self.populateChoiceDependencies(dependency, []);
					}
				});
			}
			if (data.rulesConditionsDependency) {
				// console.log("reevaluateFields for " + name);
				$.each(data.rulesConditionsDependency, function(r) {
					self.rulesengine.run(
						data.rulesConditionsDependency[r] - 1, 
						self.variables, 
						function(err, result) {
							if (err) {  }
						}
					);
				});
			}
			if (data.rulesActionsDependency) {
				$.each(data.rulesActionsDependency, function(r) {
					self.rulesengine.run(
						data.rulesActionsDependency[r] - 1, 
						self.variables, 
						function(err, result) {
							if (err) {  }
						}
					);
				});
			}
		},

		formatParamValue: function (param) {
			var data = this.getData(param.data);
			if (typeof data.value === "undefined" || data.value === "") {
				return null;
			}
			var value = data.value;
			switch (data.type) {
				case "date":
					var format = param.format;
					if (format != "" && value != "") {
						var date = Date.createFromFormat("j/n/Y", value);
						value = date.format(format);
					}
					break;
				case "day":
					var format = param.format;
					if (format != "" && value != "") {
						var date = Date.createFromFormat("j/n/Y", value + "/1/2015");
						value = date.format(format);
					}
					break;
				case "month":
					var format = param.format;
					if (format != "" && value != "") {
						var date = Date.createFromFormat("j/n/Y", "1/" + value + "/2015");
						value = date.format(format);
					}
					break;
				case "year":
					var format = param.format;
					if (format != "" && value != "") {
						var date = Date.createFromFormat("j/n/Y", "1/1/" + value);
						value = date.format(format);
					}
					break;
			}
			return value;
		},

		str_getcsv: function(input, delimiter, enclosure, escape) {
			// Thanks to Locutus
			// https://github.com/kvz/locutus/blob/master/src/php/strings/str_getcsv.js
			var output = [];
			var _backwards = function (str) {
				return str.split('').reverse().join('');
			}
			var _pq = function (str) {
				return String(str).replace(/([\\\.\+\*\?\[\^\]\$\(\)\{\}=!<>\|:])/g, '\\$1')
			}
			delimiter = delimiter || ',';
			enclosure = enclosure || '"';
			escape = escape || '\\';
			var pqEnc = _pq(enclosure);
			var pqEsc = _pq(escape);
			input = input.replace(new RegExp('^\\s*' + pqEnc), '').replace(new RegExp(pqEnc + '\\s*$'), '');
			input = _backwards(input).split(new RegExp(pqEnc + '\\s*' + _pq(delimiter) + '\\s*' + pqEnc + '(?!' + pqEsc + ')', 'g')).reverse();
			for (var i = 0, inpLen = input.length; i < inpLen; i++) {
				output.push(_backwards(input[i]).replace(new RegExp(pqEsc + pqEnc, 'g'), enclosure));
			}
			return output;
		},

		xmlToObject: function (node) {
			switch (node.nodeType) {
				case 9: // document
				case 1: // element
					var object = {};
					var attributes = node.attributes;
					for (var a = 0; a < attributes.length; a++) {
						var attr = attributes.item(a);
						object[attr.name] = attr.value;
					}
					var children = node.childNodes;
					var hasChildOrAttributes = node.attributes.length > 0;
					var text = '';
					if (! hasChildOrAttributes) {
						for (var c = 0; c < children.length; c++) {
							var child = children.item(c);
							if (child.nodeType == 3) {
								text += child.nodeValue;
							} else if (child.nodeType == 1 || child.nodeType == 2) {
								hasChildOrAttributes = true;
								break;
							}
						}
					}
					var nodeObj = {};
					if (! hasChildOrAttributes) {
						nodeObj[node.nodeName] = text;
					} else {
						for (var c = 0; c < children.length; c++) {
							var child = children.item(c);
							var childObj = self.xmlToObject(child);
							if (childObj != null) {
								object[child.nodeName] = childObj;
							}
						}
						nodeObj[node.nodeName] = object;
					}
					return nodeObj;
				case 2: // attribute
					var object = {};
					object[node.name] = node.value;
					return object;
				case 3: // text
					return node.nodeValue;
				default:
					return null;
			}
		},

		getUriSource: function (source) {
			var self = this;
			var path = '';
			var query = '';
			var headers = [];
			var datas = {};
			var ok = true;
			var params = self.simu.sources[source]['parameters'];
			$.each(params, function( p, param ) {
				var value;
				if (param.origin == 'data') {
					value = self.formatParamValue(param);
				} else {
					value = param.constant;
				}
				if (value == null) { 
					if (param.optional == '0') {
						ok = false;
						return false;
					}
					value = '';
				}
				if (param.type == 'path') {
					if (value != '' || param.optional == '0') {
						path += "/" + value.replace(/\s+/g, '+');
					}
				} else if (param.type == 'data') {
					var name = param.name;
					if (datas[name]) {
						datas[name].push(value);
					} else {
						datas[name] = [value];
					}
					query += '&' + encodeURI(name) + '=' + encodeURI(value);
				} else if (param.type == 'header') {
					if (value != '') {
						headers.push({ name: param.name, value: value });
					}
				} else if (value != '' || param.optional == '0') {
					datas[param.name] = value;
					query += '&' + encodeURI(param.name) + '=' + encodeURI(value);
				}
			});
			if (! ok) {
				return null;
			}
			var uri = self.simu.sources[source]['datasource']['uri'];
			if (path != "") {
				uri += encodeURI(path);
			}
			if (query != '') {
				query = uri + '?' + query.substr(1);
			}
			if (self.urisCaches[query]) {
				self.processSource(source, self.urisCaches[query]);
			} else {
				var method = self.simu.sources[source]['datasource']['method'];
				var returnType = self.simu.sources[source]['returnType'];
				$.ajax({
					method: method,
					url: uri,
					dataType: returnType,
					data: datas,
					beforeSend: function(xhr){
						$.each(headers, function(h, header) {
							xhr.setRequestHeader(header.name, header.value);
						});
					}
				}).done(function( result ) {
					var returnPath = self.simu.sources[source]['returnPath'];
					returnPath = self.replaceVariables(returnPath);
					if (returnType == 'json') {
						if (/^\\$/.test(returnPath)) { // jsonpath
							result = JSONPath({path: returnPath, json: result});
						} else { // xpath
							result = JSON.search(result, returnPath);
							if ($.isArray(result) && result.length == 1) {
								result = result[0];
							}
						}
					} else if (returnType == 'csv') {
						var separator = self.simu.sources[source]['separator'];
						var delimiter = self.simu.sources[source]['delimiter'];
						var lines = result.split(/\n/);
						result = [];
						for (var l = 0; l < lines.length; l++) {
							var line = $.trim(lines[l]);
							if (line != '') {
								var csv = self.str_getcsv(line, separator, delimiter);
								var cols = $.map(csv, function (c) {
									return $.trim(c);
								});
								result.push(cols);
							}
						}
						if (returnPath) {
							var indices = returnPath.split("/");
							$.each(indices, function (i, index) {
								result = result[parseInt(index, 10) - 1];
							});
						}
					} else if (returnType == 'xml'|| returnType == 'html') {
						// result = document.evaluate(returnPath, $(result).get(0), null, XPathResult.FIRST_ORDERED_NODE_TYPE, null); 
						// result = result.singleNodeValue.textContent;
						var snapshot = document.evaluate(returnPath, $(result).get(0), null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null); 
						result = [];
						try {
							for (var i = 0, len = snapshot.snapshotLength; i < len; i++) {
								var node = snapshot.snapshotItem(i);
								switch (node.nodeType) {
									case 9: // document
									case 1: // element
										result.push(self.xmlToObject(node));
										break;
									case 2: // attribute
										var object = {};
										object[node.name] = node.value;
										result.push(object);
										break;
									case 3: // text
										result.push(node.nodeValue);
								}
							}
						}
						catch (e) {
						}
						if ($.isArray(result) && result.length == 1) {
							result = result[0];
						}
					}
					self.urisCaches[query] = result;
					self.processSource(source, result);
				}).fail(function(jqXHR, textStatus, errorThrown) {
					if ((jqXHR.status != 0 && jqXHR.status >= 500) || textStatus === 'timeout') {
						self.setFatalError( Translator.trans("Data to continue this simulation are not accessible. Please try again later.") );
					}
				});
			}
		},

		getInternalSource: function (source) {
			var self = this;
			var post = {};
			post['source'] = source;
			var returnPath = self.simu.sources[source]['returnPath'];
			var replacedPath = self.replaceVariables(returnPath);
			if (replacedPath != returnPath) {
				post['returnPath'] = replacedPath;
			}
			var params = self.simu.sources[source]['parameters'];
			$.each(params, function( p, param ) {
				if (param.origin === 'data') {
					var d = self.getData(param.data);
					if (typeof d.value !== "undefined" && d.value !== "") {
						post[param.name] = d.value;
					}
				} else if (param.origin === 'constant') {
					post[param.name] = param.constant;
				}
			});
			params = $.param(post);
			if (this.sourcesCaches[params]) {
				var result = this.sourcesCaches[params];
				this.processSource(source, result);
			} else {
				var view = $('input[name=view]').eq(0).val();
				var token = $('input[name=_csrf_token]').eq(0).val();
				if (token) {
					post['_csrf_token'] = token;
				}
				var path = $(location).attr('pathname').replace("/"+view, "").replace(/\/+$/, "") + "/Default/source";
				$.post(path,
					post,
					function(result){
						self.sourcesCaches[params] = result;
						self.processSource(source, result);
					},
					"json"
				).fail(function(jqXHR, textStatus, errorThrown) {
					if ((jqXHR.status != 0 && jqXHR.status != 200) || textStatus === 'timeout') {
						self.setFatalError( Translator.trans("Data to continue this simulation are not accessible. Please try again later.") );
					}
				});
			}
		},

		processSource: function(source, result) {
			var self = this;
			$.each(this.simu.datas, function( name, data ) {
				if (typeof data.unparsedSource !== "undefined" && data.unparsedSource !== "") {
					var s = self.evaluate(data.unparsedSource);
					if (s == source) {
						if (typeof data.unparsedIndex !== "undefined" && data.unparsedIndex !== "") {
							var index = self.evaluate(data.unparsedIndex);
							if (index !== false) {
								if (result[index]) {
									self.setValue(name, result[index]);
								} else {
									self.setValue(name, result[index.toLowerCase()]);
								}
							}
						} else {
							self.setValue(name, result);
						}
					}
				}
			});
			this.populateChoiceDependencies(source, result);
		},

		populateChoiceDependencies : function (source, result) {
			var self = this;
			var dependencies = this.simu.sources[source]['choiceDependencies'];
			if (dependencies) {
				$.each(dependencies, function( d, dependency ) {
					var valueColumn = self.getData(dependency).choices.source.valueColumn;
					var labelColumn = self.getData(dependency).choices.source.labelColumn;
					var choice = $("#"+dependency);
					if (choice.is('select')) {
						choice.empty();
						var options = ['<option value="">-----</option>'];
						for (var r in result) {
							var row = result[r];
							options.push('<option value="', row[valueColumn], '">', row[labelColumn], '</option>');
						}
						choice.html(options.join(''));
					} else if (choice.hasClass('listbox-input')) {
						var items = [];
						items.push({ value: "", text: "-----", selected: true});
						for (var r in result) {
							var row = result[r];
							items.push({ value: row[valueColumn], text: row[labelColumn]});
						}
						choice.listbox('setItems', items);
					}
					self.setValue(dependency, "");
				});
			}
		},

		validateAll: function() {
			var self = this;
			var ok = true;
			this.hasError = false;
			$.each(this.simu.datas, function( name, data ) {
				ok = self.validate(name) && ok;
			});
			if (ok) this.rulesengine.runAll(this.variables,
				function(err, result) {
					if (err) {
					}
				}
			);
			return ok && !this.hasError;
		},

		processFields: function () {
			this.variables['script'] = 1;
			this.variables['dynamic'] = 1;

			this.evaluateDefaults();
			var self = this;
			$("#g6k_form input[type!=checkbox][type!=radio][name], #g6k_form input:radio:checked[name], #g6k_form input:checkbox:checked[name], #g6k_form select[name], #g6k_form textarea[name]").each(function() {
				var name = self.normalizeName($(this).attr('name'));
				var data = self.getData(name);
				if (data) {
					var value = $(this).val();
					if ($(this).attr('type') === "money" || $(this).attr('type') === "percent") {
						value = value.replace(/,/g, '.');
					}
					if (data.type === 'multichoice') {
						if ($(this).attr('type') === 'checkbox') {
							var ovalues = self.variables[name] || [];
							ovalues.push(value);
							value = ovalues;
						} else if (/^\[.*\]$/.test(value)) {
							value = JSON.parse(value);
						}
					}
					self.variables[name] = value;
				}
			});

			var rulesData = [];
			$.each(this.simu.rules, function(r, rule) {
				rulesData.push(
					{
						conditions: rule.conditions,
						ifActions: rule.ifdata,
						elseActions: rule.elsedata
					}
				);
			});
			var actionsAdapter = {
				notifyError: function(data) {
					var errorMessage = data.find("message"); 
					var target = data.find("target");
					switch (target) {
						case 'data':
							var fieldName = data.find("target", "fieldName");
							self.setError(fieldName, self.replaceVariables(errorMessage));
							break;
						case 'datagroup':
							var datagroupName = data.find("target", "datagroupName");
							self.setGroupError(datagroupName, self.replaceVariables(errorMessage));
							break;
						case 'dataset':
							self.setGlobalError(self.replaceVariables(errorMessage));
							break;
					}
				},
				notifyWarning: function(data) {
					var warningMessage = data.find("message"); 
					var target = data.find("target");
					switch (target) {
						case 'data':
							var fieldName = data.find("target", "fieldName");
							self.setWarning(fieldName, self.replaceVariables(warningMessage));
							break;
						case 'datagroup':
							var datagroupName = data.find("target", "datagroupName");
							self.setGroupWarning(datagroupName, self.replaceVariables(warningMessage));
							break;
						case 'dataset':
							self.setGlobalWarning(self.replaceVariables(warningMessage));
							break;
					}
				},
				setAttribute: function(data) {
					var attribute = data.find("attributeId");
					var fieldName = data.find("attributeId", "fieldName");
					var newValue = data.find("attributeId", "fieldName", "newValue");
					switch (attribute) {
						case 'content':
							var data = self.getData(fieldName);
							data.unparsedContent = newValue;
							if (data.unparsedContent !== "") {
								if ((! data.modifiedByUser || ! data.value || data.value.length == 0)) {
									var content = self.evaluate(data.unparsedContent);
									if (content !== false) {
										if (content && data.type === "multichoice" && ! $.isArray(content)) {
											if (/\[\]$/.test(content)) {
												content = JSON.parse(content);
											} else {
												content = [content];
											}
										}
										if (data.value !== content) {
											self.setValue(fieldName, content);
										}
									}
								}
							} else {
								if (data.value !== '') {
									self.setValue(fieldName, '');
								}
							}
							break;
						case 'default':
							self.getData(fieldName).unparsedDefault = newValue;
							break;
						case 'explanation':
							self.getData(fieldName).unparsedExplanation = newValue;
							break;
						case 'index':
							self.getData(fieldName).unparsedIndex = newValue;
							self.reevaluateFields(fieldName);
							break;
						case 'min':
							self.getData(fieldName).unparsedMin = newValue;
							break;
						case 'max':
							self.getData(fieldName).unparsedMax = newValue;
							break;
						case 'source':
							self.getData(fieldName).unparsedSource = newValue;
							break;
					}
				},
				unsetAttribute: function(data) {
					var attribute = data.find("attributeId");
					var fieldName = data.find("attributeId", "fieldName");
					switch (attribute) {
						case 'content':
							var data = self.getData(fieldName);
							data.unparsedContent = '';
							if (data.value !== '') {
								self.setValue(fieldName, '');
							}
							break;
						case 'default':
							self.getData(fieldName).unparsedDefault = '';
							break;
						case 'explanation':
							self.getData(fieldName).unparsedExplanation = '';
							break;
						case 'index':
							self.getData(fieldName).unparsedIndex = '';
							self.reevaluateFields(fieldName);
							break;
						case 'min':
							self.getData(fieldName).unparsedMin = '';
							break;
						case 'max':
							self.getData(fieldName).unparsedMax = '';
							break;
						case 'source':
							self.getData(fieldName).unparsedSource = '';
							break;
					}
				},
				hideObject: function(data) {
					var currStepId = $('input[name=step]').eq(0).val();
					var objectId = data.find("objectId");
					var stepId = data.find("objectId", "stepId");
					if (stepId == currStepId) {
						switch (objectId) {
							case 'step':
								break;
							case 'panel':
								var panelId = data.find("objectId", "stepId", "panelId");
								$("#" + self.simu.step.name + "-panel-" + panelId).hide();
								break;
							case 'fieldset':
								var panelId = data.find("objectId", "stepId", "panelId");
								var fieldsetId = data.find("objectId", "stepId", "panelId", "fieldsetId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-fieldset-" + fieldsetId).hide();
								break;
							case 'fieldrow':
								var panelId = data.find("objectId", "stepId", "panelId");
								var fieldsetId = data.find("objectId", "stepId", "panelId", "fieldsetId");
								var fieldrowId = data.find("objectId", "stepId", "panelId", "fieldsetId", "fieldrowId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-fieldset-" + fieldsetId + "-fieldrow-" + fieldrowId).hide();
								break;
							case 'field':
								var panelId = data.find("objectId", "stepId", "panelId");
								var fieldsetId = data.find("objectId", "stepId", "panelId", "fieldsetId");
								var fieldId = data.find("objectId", "stepId", "panelId", "fieldsetId", "fieldId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-fieldset-" + fieldsetId).find("div[data-field-position=" + fieldId + "]").hide();
								break;
							case 'blockinfo':
								var panelId = data.find("objectId", "stepId", "panelId");
								var blockinfoId = data.find("objectId", "stepId", "panelId", "blockinfoId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-blockinfo-" + blockinfoId).hide();
								break;
							case 'chapter':
								var panelId = data.find("objectId", "stepId", "panelId");
								var blockinfoId = data.find("objectId", "stepId", "panelId", "blockinfoId");
								var chapterId = data.find("objectId", "stepId", "panelId", "blockinfoId", "chapterId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-blockinfo-" + blockinfoId + "-chapter-" + chapterId ).hide();
								break;
							case 'section':
								var panelId = data.find("objectId", "stepId", "panelId");
								var blockinfoId = data.find("objectId", "stepId", "panelId", "blockinfoId");
								var chapterId = data.find("objectId", "stepId", "panelId", "blockinfoId", "chapterId");
								var sectionId = data.find("objectId", "stepId", "panelId", "blockinfoId", "chapterId", "sectionId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-blockinfo-" + blockinfoId + "-chapter-" + chapterId + "-section-" + sectionId).hide();
								break;
							case 'prenote':
								var panelId = data.find("objectId", "stepId", "panelId");
								var fieldsetId = data.find("objectId", "stepId", "panelId", "fieldsetId");
								var fieldId = data.find("objectId", "stepId", "panelId", "fieldsetId", "fieldId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-fieldset-" + fieldsetId).find("div[data-field-position=" + fieldId + "] .pre-note").hide();
								break;
							case 'postnote':
								var panelId = data.find("objectId", "stepId", "panelId");
								var fieldsetId = data.find("objectId", "stepId", "panelId", "fieldsetId");
								var fieldId = data.find("objectId", "stepId", "panelId", "fieldsetId", "fieldId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-fieldset-" + fieldsetId).find("div[data-field-position=" + fieldId + "] .post-note").hide();
								break;
							case 'action':
								var actionId = data.find("objectId", "stepId", "actionId");
								var action = "#g6k_form button[name=" + actionId + "], #g6k_form input[name=" + actionId + "]";
								$(action).hide();
								break;
							case 'footnote':
								var footnoteId = data.find("objectId", "stepId", "footnoteId");
								var footnote = "#foot-note-" + footnoteId;
								$(footnote).hide();
								if ( $("div.foot-notes").has("div.foot-note:visible").length) {
									$("div.foot-notes").show();
								} else {
									$("div.foot-notes").hide();
								}
								break;
							case 'choice':
								var panelId = data.find("objectId", "stepId", "panelId");
								var fieldsetId = data.find("objectId", "stepId", "panelId", "fieldsetId");
								var fieldId = data.find("objectId", "stepId", "panelId", "fieldsetId", "fieldId");
								var choiceId = data.find("objectId", "stepId", "panelId", "fieldsetId", "fieldId", "choiceId");
								var field = $("#" + self.simu.step.name + "-panel-" + panelId + "-fieldset-" + fieldsetId).find("div[data-field-position=" + fieldId + "]");
								if (field.attr('data-type') === 'choice' && (!field.attr('data-expanded') || field.attr('data-expanded') === 'false')) {
									var input = field.find("input.listbox-input, select");
									if (input.is('select')) {
										input.hideOption(choiceId); 
									} else {
										input.listbox('hideItem', choiceId);
									}
								} else {
									var input = field.find("input[value=" + choiceId + "]");
									input.parent('label').hide();
								}
								break;
						}
					}
				},        
				showObject: function(data) {
					var currStepId = $('input[name=step]').eq(0).val();
					var objectId = data.find("objectId");
					var stepId = data.find("objectId", "stepId");
					if (stepId == currStepId) {
						switch (objectId) {
							case 'step':
								break;
							case 'panel':
								var panelId = data.find("objectId", "stepId", "panelId");
								$("#" + self.simu.step.name + "-panel-" + panelId).show();
								break;
							case 'fieldset':
								var panelId = data.find("objectId", "stepId", "panelId");
								var fieldsetId = data.find("objectId", "stepId", "panelId", "fieldsetId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-fieldset-" + fieldsetId).show();
								break;
							case 'fieldrow':
								var panelId = data.find("objectId", "stepId", "panelId");
								var fieldsetId = data.find("objectId", "stepId", "panelId", "fieldsetId");
								var fieldrowId = data.find("objectId", "stepId", "panelId", "fieldsetId", "fieldrowId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-fieldset-" + fieldsetId + "-fieldrow-" + fieldrowId).show();
								break;
							case 'field':
								var panelId = data.find("objectId", "stepId", "panelId");
								var fieldsetId = data.find("objectId", "stepId", "panelId", "fieldsetId");
								var fieldId = data.find("objectId", "stepId", "panelId", "fieldsetId", "fieldId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-fieldset-" + fieldsetId).find("div[data-field-position=" + fieldId + "]").show();
								break;
							case 'blockinfo':
								var panelId = data.find("objectId", "stepId", "panelId");
								var blockinfoId = data.find("objectId", "stepId", "panelId", "blockinfoId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-blockinfo-" + blockinfoId).show();
								break;
							case 'chapter':
								var panelId = data.find("objectId", "stepId", "panelId");
								var blockinfoId = data.find("objectId", "stepId", "panelId", "blockinfoId");
								var chapterId = data.find("objectId", "stepId", "panelId", "blockinfoId", "chapterId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-blockinfo-" + blockinfoId + "-chapter-" + chapterId).show();
								break;
							case 'section':
								var panelId = data.find("objectId", "stepId", "panelId");
								var blockinfoId = data.find("objectId", "stepId", "panelId", "blockinfoId");
								var chapterId = data.find("objectId", "stepId", "panelId", "blockinfoId", "chapterId");
								var sectionId = data.find("objectId", "stepId", "panelId", "blockinfoId", "chapterId", "sectionId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-blockinfo-" + blockinfoId + "-chapter-" + chapterId + "-section-" + sectionId).show();
								break;
							case 'prenote':
								var panelId = data.find("objectId", "stepId", "panelId");
								var fieldsetId = data.find("objectId", "stepId", "panelId", "fieldsetId");
								var fieldId = data.find("objectId", "stepId", "panelId", "fieldsetId", "fieldId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-fieldset-" + fieldsetId).find("div[data-field-position=" + fieldId + "] .pre-note").show();
								break;
							case 'postnote':
								var panelId = data.find("objectId", "stepId", "panelId");
								var fieldsetId = data.find("objectId", "stepId", "panelId", "fieldsetId");
								var fieldId = data.find("objectId", "stepId", "panelId", "fieldsetId", "fieldId");
								$("#" + self.simu.step.name + "-panel-" + panelId + "-fieldset-" + fieldsetId).find("div[data-field-position=" + fieldId + "] .post-note").show();
								break;
							case 'action':
								var actionId = data.find("objectId", "stepId", "actionId");
								var action = "#g6k_form button[name=" + actionId + "], #g6k_form input[name=" + actionId + "]";
								$(action).show();
								break;
							case 'footnote':
								var footnoteId = data.find("objectId", "stepId", "footnoteId");
								var footnote = "#foot-note-" + footnoteId;
								$(footnote).show();
								$("div.foot-notes").show();
								break;
							case 'choice':
								var panelId = data.find("objectId", "stepId", "panelId");
								var fieldsetId = data.find("objectId", "stepId", "panelId", "fieldsetId");
								var fieldId = data.find("objectId", "stepId", "panelId", "fieldsetId", "fieldId");
								var choiceId = data.find("objectId", "stepId", "panelId", "fieldsetId", "fieldId", "choiceId");
								var field = $("#" + self.simu.step.name + "-panel-" + panelId + "-fieldset-" + fieldsetId).find("div[data-field-position=" + fieldId + "]");
								if (field.attr('data-type') === 'choice' && (!field.attr('data-expanded') || field.attr('data-expanded') === 'false')) {
									var input = field.find("input.listbox-input, select");
									if (input.is('select')) {
										input.showOption(choiceId); 
									} else {
										input.listbox('showItem', choiceId);
									}
								} else {
									var input = field.find("input[value=" + choiceId + "]");
									input.parent('label').show();
								}
								break;
						}
					}
				}        
			};
			this.rulesengine = new RuleEngine({
				rulesData: rulesData,
				actionsAdapter: actionsAdapter
			});

			this.rulesengine.runAll(this.variables,
				function(err, result) {
					if (err) {  }
				}
			);

			$(".simulator-profiles ul li").bind("click", function () {
				self.setProfile($(this));
				return true;
			}); 

			$(".simulator-profiles ul li").bind("keydown", function (event) {
				if (event.keyCode == 13 || event.keyCode == 32) {
					self.setProfile($(this));
				}
				return true;
			}); 

			$("#g6k_form input[name], #g6k_form select[name], #g6k_form textarea[name]").change(function () {
				var name = self.normalizeName($(this).attr('name'));
				self.lastUserInputName = name;
				var data = self.getData(name);
				data.modifiedByUser = true;
				self.removeGlobalError();
				var value = $(this).val();
				if ($(this).attr('type') === 'checkbox') {
					if (data.type === 'boolean') {
						value = $(this).is(':checked') ? 'true' : 'false';
						self.setValue(name, value);
					} else if (data.type === 'multichoice') {
							if ($(this).is(':checked')) {
								self.setValue(name, value);
							} else {
								self.unsetValue(name, value);
							}
					}
				} else {
					self.setValue(name, value);
				}
			});
			$("#g6k_form input[name], #g6k_form select[name], #g6k_form textarea[name]").focusout(function () {
				var name = self.normalizeName($(this).attr('name'));
				var data = self.getData(name);
				if (!self.check(data)) {
					switch (data.type) {
						case 'date':
							self.setError(name, Translator.trans("This value is not in the expected format (%format%)",  { "format": "jj/mm/aaaa" }, 'messages'));
							break;
						case 'number': 
							self.setError(name, Translator.trans("This value is not in the expected format (%format%)",  { "format": "chiffres seulement" }, 'messages'));
							break;
						case 'integer': 
							self.setError(name, Translator.trans("This value is not in the expected format (%format%)",  { "format": "chiffres seulement" }, 'messages'));
							break;
						case 'money': 
							self.setError(name, Translator.trans("This value is not in the expected format (%format%)",  { "format": "montant" }, 'messages'));
							break;
						case 'percent':
							self.setError(name, Translator.trans("This value is not in the expected format (%format%)",  { "format": "pourcentage" }, 'messages'));
							break;
						default:
							self.setError(name, Translator.trans("This value is not in the expected format"));
					}
				}
			});
			$("#g6k_form input[type=text][name], #g6k_form input[type=money][name], #g6k_form input[type=number][name]").bind("keypress", function(event) {
				if (event.keyCode == 13) {
					event.preventDefault();
					self.getData($(this).attr('name')).modifiedByUser = true;
					$(this).trigger("change");
					$(this).focusNextInputField();
				}
			});
			var inputTimeoutId;
			$("#g6k_form input[type=text][name], #g6k_form input[type=money][name], #g6k_form input[type=number][name]").bind('input propertychange', function(event) {
				var elt = this;
				if (typeof inputTimeoutId !== "undefined") {
					clearTimeout(inputTimeoutId);
				}
				self.getData($(this).attr('name')).modifiedByUser = true;
				inputTimeoutId = setTimeout(function () {
					$(elt).trigger("change");
				}, 500);
			});
			$("#g6k_form input[type=text][name], #g6k_form input[type=money][name]").bind('paste', function(event) {
				var elt = this;
				self.getData($(this).attr('name')).modifiedByUser = true;
				setTimeout(function () {
					$(elt).trigger("change");
					$(this).focusNextInputField();
				}, 0);
			});
			$("#g6k_form fieldset label.choice input[type=radio][name]").change(function(event) {
				var $label = $(this).parent('label.choice');
				$label.parent('fieldset').find('label.choice').removeClass('checked');
				if ( $(this).is(':checked') ) {
					$label.addClass('checked');
				}
			});
			$("#g6k_form fieldset label.choice input[type=radio][name]").focus(function(event) {
				var $label = $(this).parent('label.choice');
				$label.parent('fieldset').addClass('focused');
				var checked = false;
				var $this = $(this);
				$label.parent('fieldset').find('label.choice input[type=radio][name]').each(function() {
					if ( $(this).is(':checked') ) {
						checked = true;
					}
				});
				if (!checked) {
					$label.eq(0).addClass('checked-candidate');
				}
			});
			$("#g6k_form fieldset label.choice input[type=radio][name]").blur(function(event) {
				var $fieldset = $(this).parent('label.choice').parent('fieldset');
				var focused = false;
				var $this = $(this);
				$fieldset.find('label.choice input[type=radio][name]').each(function() {
					if ( $(this).is(':focus') ) {
						focused = true;
					}
				});
				if (!focused) {
					$fieldset.removeClass('focused');
				}
				$fieldset.find('label.choice').removeClass('checked-candidate');
			});
			$( "#g6k_form" ).submit(function( event ) {
				var bname = event.originalEvent.explicitOriginalTarget.name;
				var bwhat = self.simu.step.actions[bname].what;
				var bfor = self.simu.step.actions[bname].for;
				if (bwhat == 'submit' && bfor == 'priorStep') {
					return;
				}
				if (bwhat == 'submit' && bfor == 'newSimulation') {
					$('#g6k_form').clearForm();
					$("input.resettable").val("");
					return;
				}
				if (self.hasFatalError || ! self.validateAll()) {
					self.setGlobalError(Translator.trans("To continue you must first correct your entry"));
					event.preventDefault();
				}
			});
			$.each(this.simu.datas, function( name, data ) {
				data.value = self.variables[name];
				if (typeof data.unparsedContent !== "undefined" && data.unparsedContent !== "") {
					var content = self.evaluate(data.unparsedContent);
					if (content !== false) {
						if (content && data.type === "multichoice" && ! $.isArray(content)) {
							if (/\[\]$/.test(content)) {
								content = JSON.parse(content);
							} else {
								content = [content];
							}
						}
						self.variables[name] = data.value = content;
					}
				}
			});
			if ($("input[name='script']").val() == 0) {
				$.each(this.simu.datas, function( name, data ) {
					self.reevaluateFields(name);
				});
				$("input[name='script']").val(1);
			} else {
				$.each(this.simu.datas, function( name, data ) {
					self.reevaluateFields(name);
				});
			}
			if ( $("div.foot-notes").children("div.foot-note").filter(":visible").length) {
				$("div.foot-notes").show();
			} else {
				$("div.foot-notes").hide();
			}
		},

		choiceLabel: function(data) {
			var label = '';
			if (data.choices) {
				$.each(data.choices, function(c, choice) {
					if (choice[data.value]) {
						label = choice[data.value];
						return false;
					}
				});
			}
			return label;
		},

		formatValue: function(data) {
			var value = data.value;
			if (value && $.isNumeric(value) && (data.type === "money" || data.type === "percent")) {
				value = accounting.formatNumber(parseFloat(value), 2, " ", ",");
			}
			if ($.isArray(value)) {
				value = value.join(", ");
			}
			return value;
		},

		replaceVariablesBase: function(target) {
			var self = this;
			var result = target.replace(
				/\<var\s+[^\s]*\s*data-id="(\d+)(L?)"[^\>]*\>[^\<]+\<\/var\>/g,
				function (match, m1, m2, offs, str) {
					var name = self.getDataNameById(m1);
					return (name) ? '#(' + name + ')' + m2 : match;
				}
			);
			result = result.replace(
				/#\(([^\)]+)\)(L?)/g,
				function (match, m1, m2, offs, str) {
					var data = self.getData(m1);
					if (data && data.value) {
						if (m2 === 'L') {
							var label = self.choiceLabel(data);
							if (label !== '') {
								return label;
							}
						}
						return self.formatValue(data);
					} else {
						return match;
					}
				}
			);
			return result;
		},

		replaceVariables: function(target) {
			var result = this.replaceVariablesBase(target);
			return /#\(([^\)]+)\)/.test(result) ? false : result;
		},

		replaceVariablesOrBlank: function(target) {
			var self = this;
			var result = self.replaceVariablesBase(target);
			result = result.replace(
				/#\(([^\)]+)\)(L?)/g,
				function (match, m1, m2, offs, str) {
					var data = self.getData(m1);
					switch (data.type) {
						case 'integer':
						case 'number':
							return '0';
						case 'percent':
						case 'money':
							var v = data.value;
							data.value = '0';
							var formatted =  self.formatValue(data);
							data.value = v;
							return formatted;
						default:
							return '';
					}
				}
			);
			result = result.replace(
				/\<var\s+[^\s]*\s*data-id="(\d+)(L?)"[^\>]*\>[^\<]+\<\/var\>/g,
				function (match, m1, m2, offs, str) {
					var data = self.getData(m1);
					switch (data.type) {
						case 'integer':
						case 'number':
							return '0';
						case 'percent':
						case 'money':
							var v = data.value;
							data.value = '0';
							var formatted =  self.formatValue(data);
							data.value = v;
							return formatted;
						default:
							return '';
					}
				}
			);
			return result;
		}

	};

	global.G6k = G6k;

}(this));

$.fn.clearForm = function() {
	this.each(function() {
		var type = this.type, tag = this.tagName.toLowerCase();
		if (tag == 'form')
			return $(':input',this).clearForm();
		if (type == 'text' || type == 'password'  || type == 'number'|| tag == 'textarea') {
			this.setAttribute('value', '');
			if ($(this).hasClass('listbox-input')) {
				$(this).listbox('update');
			}
		} else if (type == 'checkbox' || type == 'radio')
			this.removeAttribute('checked');
		else if (type == 'select-one' || tag == 'select') {
			$('option', this).each(function(){
				this.removeAttribute('selected');
			});
			$(this).val("");
		}
	});

};

$.fn.focusNextInputField = function() {
	return this.each(function() {
		var fields = $(this).parents('form:eq(0)').find('input:visible,textarea:visible,select:visible');
		var index = fields.index( this );
		if ( index > -1 && ( index + 1 ) < fields.length ) {
			fields.eq( index + 1 ).focus();
		}
		return false;
	});
};

